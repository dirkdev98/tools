// Generated by @compas/code-gen

import { isQueryPart } from "@compas/store";
/**
 * @template T, E
 * @typedef {{ value: T, error?: never}|{ value?: never, error: E }} Either
 */

/**
 * @typedef {Record<string, any|undefined>} ValidatorErrorMap
 */

/**
 * @param {import("../common/types").DatabasePostInput|any} value
 * @returns {Either<import("../common/types").DatabasePost, ValidatorErrorMap>}
 */
export function validateDatabasePost(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "id",
        "text",
        "title",
        "createdAt",
        "updatedAt",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = Object.create(null);

      if (value["id"] === null || value["id"] === undefined) {
        errorMap[`$.id`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["id"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["id"]))
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["id"].length === 32) {
          result["id"] =
            value["id"].slice(0, 8) +
            "-" +
            value["id"].slice(8, 12) +
            "-" +
            value["id"].slice(12, 16) +
            "-" +
            value["id"].slice(16, 20) +
            "-" +
            value["id"].slice(20);
        } else {
          result["id"] = value["id"];
        }
      }
      if (value["text"] === null || value["text"] === undefined) {
        errorMap[`$.text`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString2 = value["text"];
        if (typeof convertedString2 !== "string") {
          errorMap[`$.text`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString2.length < 1) {
            errorMap[`$.text`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["text"] = convertedString2;
          }
        }
      }
      if (value["title"] === null || value["title"] === undefined) {
        errorMap[`$.title`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString3 = value["title"];
        if (typeof convertedString3 !== "string") {
          errorMap[`$.title`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString3.length < 1) {
            errorMap[`$.title`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["title"] = convertedString3;
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        errorMap[`$.createdAt`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        errorMap[`$.updatedAt`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["updatedAt"] === "string" ||
          typeof value["updatedAt"] === "number"
        ) {
          result["updatedAt"] = new Date(value["updatedAt"]);
        } else if (
          Object.prototype.toString.call(value["updatedAt"]) === "[object Date]"
        ) {
          result["updatedAt"] = value["updatedAt"];
        } else {
          errorMap[`$.updatedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").DatabasePostWhere|any} value
 * @returns {Either<import("../common/types").DatabasePostWhereValidated, ValidatorErrorMap>}
 */
export function validateDatabasePostWhereValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "$raw",
        "$or",
        "id",
        "idNotEqual",
        "idIn",
        "idNotIn",
        "title",
        "titleNotEqual",
        "titleIn",
        "titleNotIn",
        "titleLike",
        "titleILike",
        "titleNotLike",
        "createdAt",
        "createdAtNotEqual",
        "createdAtIn",
        "createdAtNotIn",
        "createdAtGreaterThan",
        "createdAtLowerThan",
        "updatedAt",
        "updatedAtNotEqual",
        "updatedAtIn",
        "updatedAtNotIn",
        "updatedAtGreaterThan",
        "updatedAtLowerThan",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = Object.create(null);

      if (value["$raw"] === null || value["$raw"] === undefined) {
        result["$raw"] = undefined;
      } else {
        if (isQueryPart(value["$raw"])) {
          result["$raw"] = value["$raw"];
        } else {
          errorMap[`$.$raw`] = {
            key: "validator.any",
            message:
              "Custom validator error. See the input type for more information.",
          };
        }
      }
      if (value["$or"] === null || value["$or"] === undefined) {
        result["$or"] = undefined;
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {any[]} */
        let intermediateResult3 = [];
        /** @type {any|any[]} */
        let intermediateValue3 = value["$or"];

        if (!Array.isArray(intermediateValue3)) {
          intermediateValue3 = [intermediateValue3];
        }
        result["$or"] = Array.from({ length: intermediateValue3.length });
        for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
          if (
            intermediateValue3[i3] === null ||
            intermediateValue3[i3] === undefined
          ) {
            intermediateErrorMap3[`$.${i3}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult3 = validateDatabasePostWhereValidated(
              intermediateValue3[i3],
            );

            if (refResult3.error) {
              for (const errorKey of Object.keys(refResult3.error)) {
                intermediateErrorMap3[`$.${i3}${errorKey.substring(1)}`] =
                  refResult3.error[errorKey];
              }
            }
            intermediateResult3[i3] = refResult3.value;
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            errorMap[`$.$or${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          result["$or"] = intermediateResult3;
        }
      }
      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        if (
          typeof value["id"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["id"]))
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["id"].length === 32) {
          result["id"] =
            value["id"].slice(0, 8) +
            "-" +
            value["id"].slice(8, 12) +
            "-" +
            value["id"].slice(12, 16) +
            "-" +
            value["id"].slice(16, 20) +
            "-" +
            value["id"].slice(20);
        } else {
          result["id"] = value["id"];
        }
      }
      if (value["idNotEqual"] === null || value["idNotEqual"] === undefined) {
        result["idNotEqual"] = undefined;
      } else {
        if (
          typeof value["idNotEqual"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["idNotEqual"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["idNotEqual"]))
        ) {
          errorMap[`$.idNotEqual`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["idNotEqual"].length === 32) {
          result["idNotEqual"] =
            value["idNotEqual"].slice(0, 8) +
            "-" +
            value["idNotEqual"].slice(8, 12) +
            "-" +
            value["idNotEqual"].slice(12, 16) +
            "-" +
            value["idNotEqual"].slice(16, 20) +
            "-" +
            value["idNotEqual"].slice(20);
        } else {
          result["idNotEqual"] = value["idNotEqual"];
        }
      }
      if (value["idIn"] === null || value["idIn"] === undefined) {
        result["idIn"] = undefined;
      } else {
        let hasAnyOfMatch5 = false;
        errorMap[`$.idIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch5) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap7 = {};
          /** @type {any} */
          let intermediateResult7 = undefined;
          /** @type {any} */
          let intermediateValue7 = value["idIn"];

          if (intermediateValue7 === null || intermediateValue7 === undefined) {
            intermediateErrorMap7[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap8 = {};
            /** @type {any[]} */
            let intermediateResult8 = [];
            /** @type {any|any[]} */
            let intermediateValue8 = intermediateValue7;

            if (!Array.isArray(intermediateValue8)) {
              intermediateValue8 = [intermediateValue8];
            }
            intermediateResult7 = Array.from({
              length: intermediateValue8.length,
            });
            for (let i8 = 0; i8 < intermediateValue8.length; ++i8) {
              if (
                intermediateValue8[i8] === null ||
                intermediateValue8[i8] === undefined
              ) {
                intermediateErrorMap8[`$.${i8}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue8[i8] !== "string" ||
                  (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                    intermediateValue8[i8],
                  ) &&
                    !/^[a-f0-9]{32}$/gi.test(intermediateValue8[i8]))
                ) {
                  intermediateErrorMap8[`$.${i8}`] = {
                    key: "validator.pattern",
                    patternExplanation: "UUID",
                  };
                } else if (intermediateValue8[i8].length === 32) {
                  intermediateResult8[i8] =
                    intermediateValue8[i8].slice(0, 8) +
                    "-" +
                    intermediateValue8[i8].slice(8, 12) +
                    "-" +
                    intermediateValue8[i8].slice(12, 16) +
                    "-" +
                    intermediateValue8[i8].slice(16, 20) +
                    "-" +
                    intermediateValue8[i8].slice(20);
                } else {
                  intermediateResult8[i8] = intermediateValue8[i8];
                }
              }
            }
            if (Object.keys(intermediateErrorMap8).length) {
              for (const errorKey of Object.keys(intermediateErrorMap8)) {
                intermediateErrorMap7[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap8[errorKey];
              }
            } else {
              intermediateResult7 = intermediateResult8;
            }
          }
          if (Object.keys(intermediateErrorMap7).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap7);
          } else {
            hasAnyOfMatch5 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult7;
          }
        }
        if (!hasAnyOfMatch5) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap7 = {};
          /** @type {any} */
          let intermediateResult7 = undefined;
          /** @type {any} */
          let intermediateValue7 = value["idIn"];

          if (intermediateValue7 === null || intermediateValue7 === undefined) {
            intermediateErrorMap7[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue7)) {
              intermediateResult7 = intermediateValue7;
            } else {
              intermediateErrorMap7[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap7).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap7);
          } else {
            hasAnyOfMatch5 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult7;
          }
        }
      }
      if (value["idNotIn"] === null || value["idNotIn"] === undefined) {
        result["idNotIn"] = undefined;
      } else {
        let hasAnyOfMatch6 = false;
        errorMap[`$.idNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch6) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap8 = {};
          /** @type {any} */
          let intermediateResult8 = undefined;
          /** @type {any} */
          let intermediateValue8 = value["idNotIn"];

          if (intermediateValue8 === null || intermediateValue8 === undefined) {
            intermediateErrorMap8[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap9 = {};
            /** @type {any[]} */
            let intermediateResult9 = [];
            /** @type {any|any[]} */
            let intermediateValue9 = intermediateValue8;

            if (!Array.isArray(intermediateValue9)) {
              intermediateValue9 = [intermediateValue9];
            }
            intermediateResult8 = Array.from({
              length: intermediateValue9.length,
            });
            for (let i9 = 0; i9 < intermediateValue9.length; ++i9) {
              if (
                intermediateValue9[i9] === null ||
                intermediateValue9[i9] === undefined
              ) {
                intermediateErrorMap9[`$.${i9}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue9[i9] !== "string" ||
                  (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                    intermediateValue9[i9],
                  ) &&
                    !/^[a-f0-9]{32}$/gi.test(intermediateValue9[i9]))
                ) {
                  intermediateErrorMap9[`$.${i9}`] = {
                    key: "validator.pattern",
                    patternExplanation: "UUID",
                  };
                } else if (intermediateValue9[i9].length === 32) {
                  intermediateResult9[i9] =
                    intermediateValue9[i9].slice(0, 8) +
                    "-" +
                    intermediateValue9[i9].slice(8, 12) +
                    "-" +
                    intermediateValue9[i9].slice(12, 16) +
                    "-" +
                    intermediateValue9[i9].slice(16, 20) +
                    "-" +
                    intermediateValue9[i9].slice(20);
                } else {
                  intermediateResult9[i9] = intermediateValue9[i9];
                }
              }
            }
            if (Object.keys(intermediateErrorMap9).length) {
              for (const errorKey of Object.keys(intermediateErrorMap9)) {
                intermediateErrorMap8[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap9[errorKey];
              }
            } else {
              intermediateResult8 = intermediateResult9;
            }
          }
          if (Object.keys(intermediateErrorMap8).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap8);
          } else {
            hasAnyOfMatch6 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult8;
          }
        }
        if (!hasAnyOfMatch6) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap8 = {};
          /** @type {any} */
          let intermediateResult8 = undefined;
          /** @type {any} */
          let intermediateValue8 = value["idNotIn"];

          if (intermediateValue8 === null || intermediateValue8 === undefined) {
            intermediateErrorMap8[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue8)) {
              intermediateResult8 = intermediateValue8;
            } else {
              intermediateErrorMap8[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap8).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap8);
          } else {
            hasAnyOfMatch6 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult8;
          }
        }
      }
      if (value["title"] === null || value["title"] === undefined) {
        result["title"] = undefined;
      } else {
        /** @type {string} */
        let convertedString7 = value["title"];
        if (typeof convertedString7 !== "string") {
          errorMap[`$.title`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString7.length === 0) {
            result["title"] = undefined;
          } else {
            if (convertedString7.length < 1) {
              errorMap[`$.title`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["title"] = convertedString7;
            }
          }
        }
      }
      if (
        value["titleNotEqual"] === null ||
        value["titleNotEqual"] === undefined
      ) {
        result["titleNotEqual"] = undefined;
      } else {
        /** @type {string} */
        let convertedString8 = value["titleNotEqual"];
        if (typeof convertedString8 !== "string") {
          errorMap[`$.titleNotEqual`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString8.length === 0) {
            result["titleNotEqual"] = undefined;
          } else {
            if (convertedString8.length < 1) {
              errorMap[`$.titleNotEqual`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["titleNotEqual"] = convertedString8;
            }
          }
        }
      }
      if (value["titleIn"] === null || value["titleIn"] === undefined) {
        result["titleIn"] = undefined;
      } else {
        let hasAnyOfMatch9 = false;
        errorMap[`$.titleIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch9) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap11 = {};
          /** @type {any} */
          let intermediateResult11 = undefined;
          /** @type {any} */
          let intermediateValue11 = value["titleIn"];

          if (
            intermediateValue11 === null ||
            intermediateValue11 === undefined
          ) {
            intermediateErrorMap11[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap12 = {};
            /** @type {any[]} */
            let intermediateResult12 = [];
            /** @type {any|any[]} */
            let intermediateValue12 = intermediateValue11;

            if (!Array.isArray(intermediateValue12)) {
              intermediateValue12 = [intermediateValue12];
            }
            intermediateResult11 = Array.from({
              length: intermediateValue12.length,
            });
            for (let i12 = 0; i12 < intermediateValue12.length; ++i12) {
              if (
                intermediateValue12[i12] === null ||
                intermediateValue12[i12] === undefined
              ) {
                intermediateErrorMap12[`$.${i12}`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString12 = intermediateValue12[i12];
                if (typeof convertedString12 !== "string") {
                  intermediateErrorMap12[`$.${i12}`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString12.length < 1) {
                    intermediateErrorMap12[`$.${i12}`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult12[i12] = convertedString12;
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap12).length) {
              for (const errorKey of Object.keys(intermediateErrorMap12)) {
                intermediateErrorMap11[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap12[errorKey];
              }
            } else {
              intermediateResult11 = intermediateResult12;
            }
          }
          if (Object.keys(intermediateErrorMap11).length > 0) {
            errorMap[`$.titleIn`].errors.push(intermediateErrorMap11);
          } else {
            hasAnyOfMatch9 = true;
            delete errorMap[`$.titleIn`];
            result["titleIn"] = intermediateResult11;
          }
        }
        if (!hasAnyOfMatch9) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap11 = {};
          /** @type {any} */
          let intermediateResult11 = undefined;
          /** @type {any} */
          let intermediateValue11 = value["titleIn"];

          if (
            intermediateValue11 === null ||
            intermediateValue11 === undefined
          ) {
            intermediateErrorMap11[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue11)) {
              intermediateResult11 = intermediateValue11;
            } else {
              intermediateErrorMap11[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap11).length > 0) {
            errorMap[`$.titleIn`].errors.push(intermediateErrorMap11);
          } else {
            hasAnyOfMatch9 = true;
            delete errorMap[`$.titleIn`];
            result["titleIn"] = intermediateResult11;
          }
        }
      }
      if (value["titleNotIn"] === null || value["titleNotIn"] === undefined) {
        result["titleNotIn"] = undefined;
      } else {
        let hasAnyOfMatch10 = false;
        errorMap[`$.titleNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch10) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap12 = {};
          /** @type {any} */
          let intermediateResult12 = undefined;
          /** @type {any} */
          let intermediateValue12 = value["titleNotIn"];

          if (
            intermediateValue12 === null ||
            intermediateValue12 === undefined
          ) {
            intermediateErrorMap12[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap13 = {};
            /** @type {any[]} */
            let intermediateResult13 = [];
            /** @type {any|any[]} */
            let intermediateValue13 = intermediateValue12;

            if (!Array.isArray(intermediateValue13)) {
              intermediateValue13 = [intermediateValue13];
            }
            intermediateResult12 = Array.from({
              length: intermediateValue13.length,
            });
            for (let i13 = 0; i13 < intermediateValue13.length; ++i13) {
              if (
                intermediateValue13[i13] === null ||
                intermediateValue13[i13] === undefined
              ) {
                intermediateErrorMap13[`$.${i13}`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString13 = intermediateValue13[i13];
                if (typeof convertedString13 !== "string") {
                  intermediateErrorMap13[`$.${i13}`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString13.length < 1) {
                    intermediateErrorMap13[`$.${i13}`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult13[i13] = convertedString13;
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap13).length) {
              for (const errorKey of Object.keys(intermediateErrorMap13)) {
                intermediateErrorMap12[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap13[errorKey];
              }
            } else {
              intermediateResult12 = intermediateResult13;
            }
          }
          if (Object.keys(intermediateErrorMap12).length > 0) {
            errorMap[`$.titleNotIn`].errors.push(intermediateErrorMap12);
          } else {
            hasAnyOfMatch10 = true;
            delete errorMap[`$.titleNotIn`];
            result["titleNotIn"] = intermediateResult12;
          }
        }
        if (!hasAnyOfMatch10) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap12 = {};
          /** @type {any} */
          let intermediateResult12 = undefined;
          /** @type {any} */
          let intermediateValue12 = value["titleNotIn"];

          if (
            intermediateValue12 === null ||
            intermediateValue12 === undefined
          ) {
            intermediateErrorMap12[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue12)) {
              intermediateResult12 = intermediateValue12;
            } else {
              intermediateErrorMap12[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap12).length > 0) {
            errorMap[`$.titleNotIn`].errors.push(intermediateErrorMap12);
          } else {
            hasAnyOfMatch10 = true;
            delete errorMap[`$.titleNotIn`];
            result["titleNotIn"] = intermediateResult12;
          }
        }
      }
      if (value["titleLike"] === null || value["titleLike"] === undefined) {
        result["titleLike"] = undefined;
      } else {
        /** @type {string} */
        let convertedString11 = value["titleLike"];
        if (typeof convertedString11 !== "string") {
          errorMap[`$.titleLike`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString11.length === 0) {
            result["titleLike"] = undefined;
          } else {
            if (convertedString11.length < 1) {
              errorMap[`$.titleLike`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["titleLike"] = convertedString11;
            }
          }
        }
      }
      if (value["titleILike"] === null || value["titleILike"] === undefined) {
        result["titleILike"] = undefined;
      } else {
        /** @type {string} */
        let convertedString12 = value["titleILike"];
        if (typeof convertedString12 !== "string") {
          errorMap[`$.titleILike`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString12.length === 0) {
            result["titleILike"] = undefined;
          } else {
            if (convertedString12.length < 1) {
              errorMap[`$.titleILike`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["titleILike"] = convertedString12;
            }
          }
        }
      }
      if (
        value["titleNotLike"] === null ||
        value["titleNotLike"] === undefined
      ) {
        result["titleNotLike"] = undefined;
      } else {
        /** @type {string} */
        let convertedString13 = value["titleNotLike"];
        if (typeof convertedString13 !== "string") {
          errorMap[`$.titleNotLike`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString13.length === 0) {
            result["titleNotLike"] = undefined;
          } else {
            if (convertedString13.length < 1) {
              errorMap[`$.titleNotLike`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["titleNotLike"] = convertedString13;
            }
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["createdAtNotEqual"] === null ||
        value["createdAtNotEqual"] === undefined
      ) {
        result["createdAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["createdAtNotEqual"] === "string" ||
          typeof value["createdAtNotEqual"] === "number"
        ) {
          result["createdAtNotEqual"] = new Date(value["createdAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["createdAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["createdAtNotEqual"] = value["createdAtNotEqual"];
        } else {
          errorMap[`$.createdAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["createdAtIn"] === null || value["createdAtIn"] === undefined) {
        result["createdAtIn"] = undefined;
      } else {
        let hasAnyOfMatch16 = false;
        errorMap[`$.createdAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch16) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap18 = {};
          /** @type {any} */
          let intermediateResult18 = undefined;
          /** @type {any} */
          let intermediateValue18 = value["createdAtIn"];

          if (
            intermediateValue18 === null ||
            intermediateValue18 === undefined
          ) {
            intermediateErrorMap18[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap19 = {};
            /** @type {any[]} */
            let intermediateResult19 = [];
            /** @type {any|any[]} */
            let intermediateValue19 = intermediateValue18;

            if (!Array.isArray(intermediateValue19)) {
              intermediateValue19 = [intermediateValue19];
            }
            intermediateResult18 = Array.from({
              length: intermediateValue19.length,
            });
            for (let i19 = 0; i19 < intermediateValue19.length; ++i19) {
              if (
                intermediateValue19[i19] === null ||
                intermediateValue19[i19] === undefined
              ) {
                intermediateErrorMap19[`$.${i19}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue19[i19] === "string" ||
                  typeof intermediateValue19[i19] === "number"
                ) {
                  intermediateResult19[i19] = new Date(
                    intermediateValue19[i19],
                  );
                } else if (
                  Object.prototype.toString.call(intermediateValue19[i19]) ===
                  "[object Date]"
                ) {
                  intermediateResult19[i19] = intermediateValue19[i19];
                } else {
                  intermediateErrorMap19[`$.${i19}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult19[i19]?.getTime() ?? undefined)) {
                  intermediateErrorMap19[`$.${i19}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap19).length) {
              for (const errorKey of Object.keys(intermediateErrorMap19)) {
                intermediateErrorMap18[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap19[errorKey];
              }
            } else {
              intermediateResult18 = intermediateResult19;
            }
          }
          if (Object.keys(intermediateErrorMap18).length > 0) {
            errorMap[`$.createdAtIn`].errors.push(intermediateErrorMap18);
          } else {
            hasAnyOfMatch16 = true;
            delete errorMap[`$.createdAtIn`];
            result["createdAtIn"] = intermediateResult18;
          }
        }
        if (!hasAnyOfMatch16) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap18 = {};
          /** @type {any} */
          let intermediateResult18 = undefined;
          /** @type {any} */
          let intermediateValue18 = value["createdAtIn"];

          if (
            intermediateValue18 === null ||
            intermediateValue18 === undefined
          ) {
            intermediateErrorMap18[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue18)) {
              intermediateResult18 = intermediateValue18;
            } else {
              intermediateErrorMap18[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap18).length > 0) {
            errorMap[`$.createdAtIn`].errors.push(intermediateErrorMap18);
          } else {
            hasAnyOfMatch16 = true;
            delete errorMap[`$.createdAtIn`];
            result["createdAtIn"] = intermediateResult18;
          }
        }
      }
      if (
        value["createdAtNotIn"] === null ||
        value["createdAtNotIn"] === undefined
      ) {
        result["createdAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch17 = false;
        errorMap[`$.createdAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch17) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap19 = {};
          /** @type {any} */
          let intermediateResult19 = undefined;
          /** @type {any} */
          let intermediateValue19 = value["createdAtNotIn"];

          if (
            intermediateValue19 === null ||
            intermediateValue19 === undefined
          ) {
            intermediateErrorMap19[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap20 = {};
            /** @type {any[]} */
            let intermediateResult20 = [];
            /** @type {any|any[]} */
            let intermediateValue20 = intermediateValue19;

            if (!Array.isArray(intermediateValue20)) {
              intermediateValue20 = [intermediateValue20];
            }
            intermediateResult19 = Array.from({
              length: intermediateValue20.length,
            });
            for (let i20 = 0; i20 < intermediateValue20.length; ++i20) {
              if (
                intermediateValue20[i20] === null ||
                intermediateValue20[i20] === undefined
              ) {
                intermediateErrorMap20[`$.${i20}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue20[i20] === "string" ||
                  typeof intermediateValue20[i20] === "number"
                ) {
                  intermediateResult20[i20] = new Date(
                    intermediateValue20[i20],
                  );
                } else if (
                  Object.prototype.toString.call(intermediateValue20[i20]) ===
                  "[object Date]"
                ) {
                  intermediateResult20[i20] = intermediateValue20[i20];
                } else {
                  intermediateErrorMap20[`$.${i20}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult20[i20]?.getTime() ?? undefined)) {
                  intermediateErrorMap20[`$.${i20}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap20).length) {
              for (const errorKey of Object.keys(intermediateErrorMap20)) {
                intermediateErrorMap19[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap20[errorKey];
              }
            } else {
              intermediateResult19 = intermediateResult20;
            }
          }
          if (Object.keys(intermediateErrorMap19).length > 0) {
            errorMap[`$.createdAtNotIn`].errors.push(intermediateErrorMap19);
          } else {
            hasAnyOfMatch17 = true;
            delete errorMap[`$.createdAtNotIn`];
            result["createdAtNotIn"] = intermediateResult19;
          }
        }
        if (!hasAnyOfMatch17) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap19 = {};
          /** @type {any} */
          let intermediateResult19 = undefined;
          /** @type {any} */
          let intermediateValue19 = value["createdAtNotIn"];

          if (
            intermediateValue19 === null ||
            intermediateValue19 === undefined
          ) {
            intermediateErrorMap19[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue19)) {
              intermediateResult19 = intermediateValue19;
            } else {
              intermediateErrorMap19[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap19).length > 0) {
            errorMap[`$.createdAtNotIn`].errors.push(intermediateErrorMap19);
          } else {
            hasAnyOfMatch17 = true;
            delete errorMap[`$.createdAtNotIn`];
            result["createdAtNotIn"] = intermediateResult19;
          }
        }
      }
      if (
        value["createdAtGreaterThan"] === null ||
        value["createdAtGreaterThan"] === undefined
      ) {
        result["createdAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["createdAtGreaterThan"] === "string" ||
          typeof value["createdAtGreaterThan"] === "number"
        ) {
          result["createdAtGreaterThan"] = new Date(
            value["createdAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["createdAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["createdAtGreaterThan"] = value["createdAtGreaterThan"];
        } else {
          errorMap[`$.createdAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["createdAtLowerThan"] === null ||
        value["createdAtLowerThan"] === undefined
      ) {
        result["createdAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["createdAtLowerThan"] === "string" ||
          typeof value["createdAtLowerThan"] === "number"
        ) {
          result["createdAtLowerThan"] = new Date(value["createdAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["createdAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["createdAtLowerThan"] = value["createdAtLowerThan"];
        } else {
          errorMap[`$.createdAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = undefined;
      } else {
        if (
          typeof value["updatedAt"] === "string" ||
          typeof value["updatedAt"] === "number"
        ) {
          result["updatedAt"] = new Date(value["updatedAt"]);
        } else if (
          Object.prototype.toString.call(value["updatedAt"]) === "[object Date]"
        ) {
          result["updatedAt"] = value["updatedAt"];
        } else {
          errorMap[`$.updatedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["updatedAtNotEqual"] === null ||
        value["updatedAtNotEqual"] === undefined
      ) {
        result["updatedAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["updatedAtNotEqual"] === "string" ||
          typeof value["updatedAtNotEqual"] === "number"
        ) {
          result["updatedAtNotEqual"] = new Date(value["updatedAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["updatedAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["updatedAtNotEqual"] = value["updatedAtNotEqual"];
        } else {
          errorMap[`$.updatedAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAtIn"] === null || value["updatedAtIn"] === undefined) {
        result["updatedAtIn"] = undefined;
      } else {
        let hasAnyOfMatch22 = false;
        errorMap[`$.updatedAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch22) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap24 = {};
          /** @type {any} */
          let intermediateResult24 = undefined;
          /** @type {any} */
          let intermediateValue24 = value["updatedAtIn"];

          if (
            intermediateValue24 === null ||
            intermediateValue24 === undefined
          ) {
            intermediateErrorMap24[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap25 = {};
            /** @type {any[]} */
            let intermediateResult25 = [];
            /** @type {any|any[]} */
            let intermediateValue25 = intermediateValue24;

            if (!Array.isArray(intermediateValue25)) {
              intermediateValue25 = [intermediateValue25];
            }
            intermediateResult24 = Array.from({
              length: intermediateValue25.length,
            });
            for (let i25 = 0; i25 < intermediateValue25.length; ++i25) {
              if (
                intermediateValue25[i25] === null ||
                intermediateValue25[i25] === undefined
              ) {
                intermediateErrorMap25[`$.${i25}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue25[i25] === "string" ||
                  typeof intermediateValue25[i25] === "number"
                ) {
                  intermediateResult25[i25] = new Date(
                    intermediateValue25[i25],
                  );
                } else if (
                  Object.prototype.toString.call(intermediateValue25[i25]) ===
                  "[object Date]"
                ) {
                  intermediateResult25[i25] = intermediateValue25[i25];
                } else {
                  intermediateErrorMap25[`$.${i25}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult25[i25]?.getTime() ?? undefined)) {
                  intermediateErrorMap25[`$.${i25}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap25).length) {
              for (const errorKey of Object.keys(intermediateErrorMap25)) {
                intermediateErrorMap24[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap25[errorKey];
              }
            } else {
              intermediateResult24 = intermediateResult25;
            }
          }
          if (Object.keys(intermediateErrorMap24).length > 0) {
            errorMap[`$.updatedAtIn`].errors.push(intermediateErrorMap24);
          } else {
            hasAnyOfMatch22 = true;
            delete errorMap[`$.updatedAtIn`];
            result["updatedAtIn"] = intermediateResult24;
          }
        }
        if (!hasAnyOfMatch22) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap24 = {};
          /** @type {any} */
          let intermediateResult24 = undefined;
          /** @type {any} */
          let intermediateValue24 = value["updatedAtIn"];

          if (
            intermediateValue24 === null ||
            intermediateValue24 === undefined
          ) {
            intermediateErrorMap24[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue24)) {
              intermediateResult24 = intermediateValue24;
            } else {
              intermediateErrorMap24[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap24).length > 0) {
            errorMap[`$.updatedAtIn`].errors.push(intermediateErrorMap24);
          } else {
            hasAnyOfMatch22 = true;
            delete errorMap[`$.updatedAtIn`];
            result["updatedAtIn"] = intermediateResult24;
          }
        }
      }
      if (
        value["updatedAtNotIn"] === null ||
        value["updatedAtNotIn"] === undefined
      ) {
        result["updatedAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch23 = false;
        errorMap[`$.updatedAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch23) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap25 = {};
          /** @type {any} */
          let intermediateResult25 = undefined;
          /** @type {any} */
          let intermediateValue25 = value["updatedAtNotIn"];

          if (
            intermediateValue25 === null ||
            intermediateValue25 === undefined
          ) {
            intermediateErrorMap25[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap26 = {};
            /** @type {any[]} */
            let intermediateResult26 = [];
            /** @type {any|any[]} */
            let intermediateValue26 = intermediateValue25;

            if (!Array.isArray(intermediateValue26)) {
              intermediateValue26 = [intermediateValue26];
            }
            intermediateResult25 = Array.from({
              length: intermediateValue26.length,
            });
            for (let i26 = 0; i26 < intermediateValue26.length; ++i26) {
              if (
                intermediateValue26[i26] === null ||
                intermediateValue26[i26] === undefined
              ) {
                intermediateErrorMap26[`$.${i26}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue26[i26] === "string" ||
                  typeof intermediateValue26[i26] === "number"
                ) {
                  intermediateResult26[i26] = new Date(
                    intermediateValue26[i26],
                  );
                } else if (
                  Object.prototype.toString.call(intermediateValue26[i26]) ===
                  "[object Date]"
                ) {
                  intermediateResult26[i26] = intermediateValue26[i26];
                } else {
                  intermediateErrorMap26[`$.${i26}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult26[i26]?.getTime() ?? undefined)) {
                  intermediateErrorMap26[`$.${i26}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap26).length) {
              for (const errorKey of Object.keys(intermediateErrorMap26)) {
                intermediateErrorMap25[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap26[errorKey];
              }
            } else {
              intermediateResult25 = intermediateResult26;
            }
          }
          if (Object.keys(intermediateErrorMap25).length > 0) {
            errorMap[`$.updatedAtNotIn`].errors.push(intermediateErrorMap25);
          } else {
            hasAnyOfMatch23 = true;
            delete errorMap[`$.updatedAtNotIn`];
            result["updatedAtNotIn"] = intermediateResult25;
          }
        }
        if (!hasAnyOfMatch23) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap25 = {};
          /** @type {any} */
          let intermediateResult25 = undefined;
          /** @type {any} */
          let intermediateValue25 = value["updatedAtNotIn"];

          if (
            intermediateValue25 === null ||
            intermediateValue25 === undefined
          ) {
            intermediateErrorMap25[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue25)) {
              intermediateResult25 = intermediateValue25;
            } else {
              intermediateErrorMap25[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap25).length > 0) {
            errorMap[`$.updatedAtNotIn`].errors.push(intermediateErrorMap25);
          } else {
            hasAnyOfMatch23 = true;
            delete errorMap[`$.updatedAtNotIn`];
            result["updatedAtNotIn"] = intermediateResult25;
          }
        }
      }
      if (
        value["updatedAtGreaterThan"] === null ||
        value["updatedAtGreaterThan"] === undefined
      ) {
        result["updatedAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["updatedAtGreaterThan"] === "string" ||
          typeof value["updatedAtGreaterThan"] === "number"
        ) {
          result["updatedAtGreaterThan"] = new Date(
            value["updatedAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["updatedAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["updatedAtGreaterThan"] = value["updatedAtGreaterThan"];
        } else {
          errorMap[`$.updatedAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["updatedAtLowerThan"] === null ||
        value["updatedAtLowerThan"] === undefined
      ) {
        result["updatedAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["updatedAtLowerThan"] === "string" ||
          typeof value["updatedAtLowerThan"] === "number"
        ) {
          result["updatedAtLowerThan"] = new Date(value["updatedAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["updatedAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["updatedAtLowerThan"] = value["updatedAtLowerThan"];
        } else {
          errorMap[`$.updatedAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").DatabasePostOrderBy|any} value
 * @returns {Either<import("../common/types").DatabasePostOrderByValidated, ValidatorErrorMap>}
 */
export function validateDatabasePostOrderByValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    let hasAnyOfMatch0 = false;
    errorMap[`$`] = {
      key: "validator.anyOf",
      errors: [],
    };
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        if (isQueryPart(intermediateValue2)) {
          intermediateResult2 = intermediateValue2;
        } else {
          intermediateErrorMap2[`$`] = {
            key: "validator.any",
            message:
              "Custom validator error. See the input type for more information.",
          };
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {any[]} */
        let intermediateResult3 = [];
        /** @type {any|any[]} */
        let intermediateValue3 = intermediateValue2;

        if (!Array.isArray(intermediateValue3)) {
          intermediateValue3 = [intermediateValue3];
        }
        intermediateResult2 = Array.from({ length: intermediateValue3.length });
        for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
          if (
            intermediateValue3[i3] === null ||
            intermediateValue3[i3] === undefined
          ) {
            intermediateErrorMap3[`$.${i3}`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString3 = intermediateValue3[i3];
            if (typeof convertedString3 !== "string") {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString3.length < 1) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else if (
                convertedString3 !== "id" &&
                convertedString3 !== "title" &&
                convertedString3 !== "createdAt" &&
                convertedString3 !== "updatedAt"
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.oneOf",
                  allowedValues: ["id", "title", "createdAt", "updatedAt"],
                  foundValue: convertedString3,
                };
              } else {
                intermediateResult3[i3] = convertedString3;
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          intermediateResult2 = intermediateResult3;
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").DatabasePostOrderBySpec|any} value
 * @returns {Either<import("../common/types").DatabasePostOrderBySpec, ValidatorErrorMap>}
 */
export function validateDatabasePostOrderBySpec(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set(["id", "title", "createdAt", "updatedAt"]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = Object.create(null);

      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        /** @type {string} */
        let convertedString1 = value["id"];
        if (typeof convertedString1 !== "string") {
          errorMap[`$.id`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString1.length === 0) {
            result["id"] = undefined;
          } else {
            if (convertedString1.length < 1) {
              errorMap[`$.id`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString1 !== "ASC" &&
              convertedString1 !== "DESC"
            ) {
              errorMap[`$.id`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString1,
              };
            } else {
              result["id"] = convertedString1;
            }
          }
        }
      }
      if (value["title"] === null || value["title"] === undefined) {
        result["title"] = undefined;
      } else {
        /** @type {string} */
        let convertedString2 = value["title"];
        if (typeof convertedString2 !== "string") {
          errorMap[`$.title`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString2.length === 0) {
            result["title"] = undefined;
          } else {
            if (convertedString2.length < 1) {
              errorMap[`$.title`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString2 !== "ASC" &&
              convertedString2 !== "DESC"
            ) {
              errorMap[`$.title`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString2,
              };
            } else {
              result["title"] = convertedString2;
            }
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        /** @type {string} */
        let convertedString3 = value["createdAt"];
        if (typeof convertedString3 !== "string") {
          errorMap[`$.createdAt`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString3.length === 0) {
            result["createdAt"] = undefined;
          } else {
            if (convertedString3.length < 1) {
              errorMap[`$.createdAt`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString3 !== "ASC" &&
              convertedString3 !== "DESC"
            ) {
              errorMap[`$.createdAt`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString3,
              };
            } else {
              result["createdAt"] = convertedString3;
            }
          }
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = undefined;
      } else {
        /** @type {string} */
        let convertedString4 = value["updatedAt"];
        if (typeof convertedString4 !== "string") {
          errorMap[`$.updatedAt`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString4.length === 0) {
            result["updatedAt"] = undefined;
          } else {
            if (convertedString4.length < 1) {
              errorMap[`$.updatedAt`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString4 !== "ASC" &&
              convertedString4 !== "DESC"
            ) {
              errorMap[`$.updatedAt`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString4,
              };
            } else {
              result["updatedAt"] = convertedString4;
            }
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").DatabasePostQueryBuilder|any} value
 * @returns {Either<import("../common/types").DatabasePostQueryBuilderValidated, ValidatorErrorMap>}
 */
export function validateDatabasePostQueryBuilderValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "where",
        "orderBy",
        "orderBySpec",
        "limit",
        "offset",
        "select",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = Object.create(null);

      if (value["where"] === null || value["where"] === undefined) {
        result["where"] = undefined;
      } else {
        const refResult1 = validateDatabasePostWhereValidated(value["where"]);

        if (refResult1.error) {
          for (const errorKey of Object.keys(refResult1.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult1.error[errorKey];
          }
        }
        result["where"] = refResult1.value;
      }
      if (value["orderBy"] === null || value["orderBy"] === undefined) {
        result["orderBy"] = undefined;
      } else {
        const refResult2 = validateDatabasePostOrderByValidated(
          value["orderBy"],
        );

        if (refResult2.error) {
          for (const errorKey of Object.keys(refResult2.error)) {
            errorMap[`$.orderBy${errorKey.substring(1)}`] =
              refResult2.error[errorKey];
          }
        }
        result["orderBy"] = refResult2.value;
      }
      if (value["orderBySpec"] === null || value["orderBySpec"] === undefined) {
        result["orderBySpec"] = undefined;
      } else {
        const refResult3 = validateDatabasePostOrderBySpec(
          value["orderBySpec"],
        );

        if (refResult3.error) {
          for (const errorKey of Object.keys(refResult3.error)) {
            errorMap[`$.orderBySpec${errorKey.substring(1)}`] =
              refResult3.error[errorKey];
          }
        }
        result["orderBySpec"] = refResult3.value;
      }
      if (value["limit"] === null || value["limit"] === undefined) {
        result["limit"] = undefined;
      } else {
        let convertedNumber4 = value["limit"];
        if (
          typeof convertedNumber4 !== "number" &&
          typeof convertedNumber4 === "string"
        ) {
          convertedNumber4 = Number(convertedNumber4);
        }
        if (
          typeof convertedNumber4 !== "number" ||
          isNaN(convertedNumber4) ||
          !isFinite(convertedNumber4) ||
          !Number.isInteger(convertedNumber4)
        ) {
          errorMap[`$.limit`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber4 < 1) {
          errorMap[`$.limit`] = {
            key: "validator.range",
            minValue: 1,
          };
        } else {
          result["limit"] = convertedNumber4;
        }
      }
      if (value["offset"] === null || value["offset"] === undefined) {
        result["offset"] = undefined;
      } else {
        let convertedNumber5 = value["offset"];
        if (
          typeof convertedNumber5 !== "number" &&
          typeof convertedNumber5 === "string"
        ) {
          convertedNumber5 = Number(convertedNumber5);
        }
        if (
          typeof convertedNumber5 !== "number" ||
          isNaN(convertedNumber5) ||
          !isFinite(convertedNumber5) ||
          !Number.isInteger(convertedNumber5)
        ) {
          errorMap[`$.offset`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber5 < 0) {
          errorMap[`$.offset`] = {
            key: "validator.range",
            minValue: 0,
          };
        } else {
          result["offset"] = convertedNumber5;
        }
      }
      if (value["select"] === null || value["select"] === undefined) {
        result["select"] = ["id", "text", "title", "createdAt", "updatedAt"];
      } else {
        const refResult6 = validateDatabasePostReturningValidated(
          value["select"],
        );

        if (refResult6.error) {
          for (const errorKey of Object.keys(refResult6.error)) {
            errorMap[`$.select${errorKey.substring(1)}`] =
              refResult6.error[errorKey];
          }
        }
        result["select"] = refResult6.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").DatabasePostReturning|any} value
 * @returns {Either<import("../common/types").DatabasePostReturningValidated, ValidatorErrorMap>}
 */
export function validateDatabasePostReturningValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    result = undefined;
  } else {
    let hasAnyOfMatch0 = false;
    errorMap[`$`] = {
      key: "validator.anyOf",
      errors: [],
    };
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString2 = intermediateValue2;
        if (typeof convertedString2 !== "string") {
          intermediateErrorMap2[`$`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString2.length < 1) {
            intermediateErrorMap2[`$`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString2 !== "*") {
            intermediateErrorMap2[`$`] = {
              key: "validator.oneOf",
              allowedValues: ["*"],
              foundValue: convertedString2,
            };
          } else {
            intermediateResult2 = convertedString2;
          }
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {any[]} */
        let intermediateResult3 = [];
        /** @type {any|any[]} */
        let intermediateValue3 = intermediateValue2;

        if (!Array.isArray(intermediateValue3)) {
          intermediateValue3 = [intermediateValue3];
        }
        intermediateResult2 = Array.from({ length: intermediateValue3.length });
        for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
          if (
            intermediateValue3[i3] === null ||
            intermediateValue3[i3] === undefined
          ) {
            intermediateErrorMap3[`$.${i3}`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString3 = intermediateValue3[i3];
            if (typeof convertedString3 !== "string") {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString3.length < 1) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else if (
                convertedString3 !== "id" &&
                convertedString3 !== "text" &&
                convertedString3 !== "title" &&
                convertedString3 !== "createdAt" &&
                convertedString3 !== "updatedAt"
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.oneOf",
                  allowedValues: [
                    "id",
                    "text",
                    "title",
                    "createdAt",
                    "updatedAt",
                  ],
                  foundValue: convertedString3,
                };
              } else {
                intermediateResult3[i3] = convertedString3;
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          intermediateResult2 = intermediateResult3;
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").DatabasePostInsert|any} value
 * @returns {Either<import("../common/types").DatabasePostInsertValidated, ValidatorErrorMap>}
 */
export function validateDatabasePostInsertValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set(["insert", "returning"]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = Object.create(null);

      if (value["insert"] === null || value["insert"] === undefined) {
        errorMap[`$.insert`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap2 = {};
        /** @type {any[]} */
        let intermediateResult2 = [];
        /** @type {any|any[]} */
        let intermediateValue2 = value["insert"];

        if (!Array.isArray(intermediateValue2)) {
          intermediateValue2 = [intermediateValue2];
        }
        if (intermediateValue2.length < 1) {
          errorMap[`$.insert`] = {
            key: "validator.length",
            minLength: 1,
            foundLength: intermediateValue2.length,
          };
        }
        if (intermediateValue2.length > 50000) {
          errorMap[`$.insert`] = {
            key: "validator.length",
            maxLength: 50000,
            foundLength: intermediateValue2.length,
          };
        }
        result["insert"] = Array.from({ length: intermediateValue2.length });
        for (let i2 = 0; i2 < intermediateValue2.length; ++i2) {
          if (
            intermediateValue2[i2] === null ||
            intermediateValue2[i2] === undefined
          ) {
            intermediateErrorMap2[`$.${i2}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult2 = validateDatabasePostInsertPartialValidated(
              intermediateValue2[i2],
            );

            if (refResult2.error) {
              for (const errorKey of Object.keys(refResult2.error)) {
                intermediateErrorMap2[`$.${i2}${errorKey.substring(1)}`] =
                  refResult2.error[errorKey];
              }
            }
            intermediateResult2[i2] = refResult2.value;
          }
        }
        if (Object.keys(intermediateErrorMap2).length) {
          for (const errorKey of Object.keys(intermediateErrorMap2)) {
            errorMap[`$.insert${errorKey.substring(1)}`] =
              intermediateErrorMap2[errorKey];
          }
        } else {
          result["insert"] = intermediateResult2;
        }
      }
      if (value["returning"] === null || value["returning"] === undefined) {
        result["returning"] = undefined;
      } else {
        const refResult2 = validateDatabasePostReturningValidated(
          value["returning"],
        );

        if (refResult2.error) {
          for (const errorKey of Object.keys(refResult2.error)) {
            errorMap[`$.returning${errorKey.substring(1)}`] =
              refResult2.error[errorKey];
          }
        }
        result["returning"] = refResult2.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").DatabasePostInsertPartial|any} value
 * @returns {Either<import("../common/types").DatabasePostInsertPartialValidated, ValidatorErrorMap>}
 */
export function validateDatabasePostInsertPartialValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "id",
        "text",
        "title",
        "createdAt",
        "updatedAt",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = Object.create(null);

      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        if (
          typeof value["id"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["id"]))
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["id"].length === 32) {
          result["id"] =
            value["id"].slice(0, 8) +
            "-" +
            value["id"].slice(8, 12) +
            "-" +
            value["id"].slice(12, 16) +
            "-" +
            value["id"].slice(16, 20) +
            "-" +
            value["id"].slice(20);
        } else {
          result["id"] = value["id"];
        }
      }
      if (value["text"] === null || value["text"] === undefined) {
        errorMap[`$.text`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString2 = value["text"];
        if (typeof convertedString2 !== "string") {
          errorMap[`$.text`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString2.length < 1) {
            errorMap[`$.text`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["text"] = convertedString2;
          }
        }
      }
      if (value["title"] === null || value["title"] === undefined) {
        errorMap[`$.title`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString3 = value["title"];
        if (typeof convertedString3 !== "string") {
          errorMap[`$.title`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString3.length < 1) {
            errorMap[`$.title`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["title"] = convertedString3;
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = value["createdAt"];
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = value["updatedAt"];
      } else {
        if (
          typeof value["updatedAt"] === "string" ||
          typeof value["updatedAt"] === "number"
        ) {
          result["updatedAt"] = new Date(value["updatedAt"]);
        } else if (
          Object.prototype.toString.call(value["updatedAt"]) === "[object Date]"
        ) {
          result["updatedAt"] = value["updatedAt"];
        } else {
          errorMap[`$.updatedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").DatabasePostUpdate|any} value
 * @returns {Either<import("../common/types").DatabasePostUpdateValidated, ValidatorErrorMap>}
 */
export function validateDatabasePostUpdateValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set(["update", "where", "returning"]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = Object.create(null);

      if (value["update"] === null || value["update"] === undefined) {
        errorMap[`$.update`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult1 = validateDatabasePostUpdatePartialValidated(
          value["update"],
        );

        if (refResult1.error) {
          for (const errorKey of Object.keys(refResult1.error)) {
            errorMap[`$.update${errorKey.substring(1)}`] =
              refResult1.error[errorKey];
          }
        }
        result["update"] = refResult1.value;
      }
      if (value["where"] === null || value["where"] === undefined) {
        errorMap[`$.where`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult2 = validateDatabasePostWhereValidated(value["where"]);

        if (refResult2.error) {
          for (const errorKey of Object.keys(refResult2.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult2.error[errorKey];
          }
        }
        result["where"] = refResult2.value;
      }
      if (value["returning"] === null || value["returning"] === undefined) {
        result["returning"] = undefined;
      } else {
        const refResult3 = validateDatabasePostReturningValidated(
          value["returning"],
        );

        if (refResult3.error) {
          for (const errorKey of Object.keys(refResult3.error)) {
            errorMap[`$.returning${errorKey.substring(1)}`] =
              refResult3.error[errorKey];
          }
        }
        result["returning"] = refResult3.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").DatabasePostUpdatePartial|any} value
 * @returns {Either<import("../common/types").DatabasePostUpdatePartialValidated, ValidatorErrorMap>}
 */
export function validateDatabasePostUpdatePartialValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set(["text", "title", "createdAt", "updatedAt"]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = Object.create(null);

      if (value["text"] === null || value["text"] === undefined) {
        result["text"] = undefined;
      } else {
        let hasAnyOfMatch1 = false;
        errorMap[`$.text`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch1) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap3 = {};
          /** @type {any} */
          let intermediateResult3 = undefined;
          /** @type {any} */
          let intermediateValue3 = value["text"];

          if (intermediateValue3 === null || intermediateValue3 === undefined) {
            intermediateErrorMap3[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue3 !== "object" ||
              Array.isArray(intermediateValue3)
            ) {
              intermediateErrorMap3[`$`] = {
                key: "validator.object",
                value: intermediateValue3,
                foundType: typeof intermediateValue3,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys3 = new Set(["$append"]);
              for (const key of Object.keys(intermediateValue3)) {
                if (
                  !knownKeys3.has(key) &&
                  intermediateValue3[key] !== null &&
                  intermediateValue3[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys3];
                  const foundKeys = Object.keys(intermediateValue3);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys3.has(it),
                  );
                  intermediateErrorMap3[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult3 = Object.create(null);

              if (
                intermediateValue3["$append"] === null ||
                intermediateValue3["$append"] === undefined
              ) {
                intermediateErrorMap3[`$.$append`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString4 = intermediateValue3["$append"];
                if (typeof convertedString4 !== "string") {
                  intermediateErrorMap3[`$.$append`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString4.length < 1) {
                    intermediateErrorMap3[`$.$append`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult3["$append"] = convertedString4;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap3).length > 0) {
            errorMap[`$.text`].errors.push(intermediateErrorMap3);
          } else {
            hasAnyOfMatch1 = true;
            delete errorMap[`$.text`];
            result["text"] = intermediateResult3;
          }
        }
        if (!hasAnyOfMatch1) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap3 = {};
          /** @type {any} */
          let intermediateResult3 = undefined;
          /** @type {any} */
          let intermediateValue3 = value["text"];

          if (intermediateValue3 === null || intermediateValue3 === undefined) {
            intermediateResult3 = undefined;
          } else {
            /** @type {string} */
            let convertedString3 = intermediateValue3;
            if (typeof convertedString3 !== "string") {
              intermediateErrorMap3[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString3.length === 0) {
                intermediateResult3 = undefined;
              } else {
                if (convertedString3.length < 1) {
                  intermediateErrorMap3[`$`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  intermediateResult3 = convertedString3;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap3).length > 0) {
            errorMap[`$.text`].errors.push(intermediateErrorMap3);
          } else {
            hasAnyOfMatch1 = true;
            delete errorMap[`$.text`];
            result["text"] = intermediateResult3;
          }
        }
      }
      if (value["title"] === null || value["title"] === undefined) {
        result["title"] = undefined;
      } else {
        let hasAnyOfMatch2 = false;
        errorMap[`$.title`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch2) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap4 = {};
          /** @type {any} */
          let intermediateResult4 = undefined;
          /** @type {any} */
          let intermediateValue4 = value["title"];

          if (intermediateValue4 === null || intermediateValue4 === undefined) {
            intermediateErrorMap4[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue4 !== "object" ||
              Array.isArray(intermediateValue4)
            ) {
              intermediateErrorMap4[`$`] = {
                key: "validator.object",
                value: intermediateValue4,
                foundType: typeof intermediateValue4,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys4 = new Set(["$append"]);
              for (const key of Object.keys(intermediateValue4)) {
                if (
                  !knownKeys4.has(key) &&
                  intermediateValue4[key] !== null &&
                  intermediateValue4[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys4];
                  const foundKeys = Object.keys(intermediateValue4);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys4.has(it),
                  );
                  intermediateErrorMap4[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult4 = Object.create(null);

              if (
                intermediateValue4["$append"] === null ||
                intermediateValue4["$append"] === undefined
              ) {
                intermediateErrorMap4[`$.$append`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString5 = intermediateValue4["$append"];
                if (typeof convertedString5 !== "string") {
                  intermediateErrorMap4[`$.$append`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString5.length < 1) {
                    intermediateErrorMap4[`$.$append`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult4["$append"] = convertedString5;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap4).length > 0) {
            errorMap[`$.title`].errors.push(intermediateErrorMap4);
          } else {
            hasAnyOfMatch2 = true;
            delete errorMap[`$.title`];
            result["title"] = intermediateResult4;
          }
        }
        if (!hasAnyOfMatch2) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap4 = {};
          /** @type {any} */
          let intermediateResult4 = undefined;
          /** @type {any} */
          let intermediateValue4 = value["title"];

          if (intermediateValue4 === null || intermediateValue4 === undefined) {
            intermediateResult4 = undefined;
          } else {
            /** @type {string} */
            let convertedString4 = intermediateValue4;
            if (typeof convertedString4 !== "string") {
              intermediateErrorMap4[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString4.length === 0) {
                intermediateResult4 = undefined;
              } else {
                if (convertedString4.length < 1) {
                  intermediateErrorMap4[`$`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  intermediateResult4 = convertedString4;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap4).length > 0) {
            errorMap[`$.title`].errors.push(intermediateErrorMap4);
          } else {
            hasAnyOfMatch2 = true;
            delete errorMap[`$.title`];
            result["title"] = intermediateResult4;
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        let hasAnyOfMatch3 = false;
        errorMap[`$.createdAt`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch3) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap5 = {};
          /** @type {any} */
          let intermediateResult5 = undefined;
          /** @type {any} */
          let intermediateValue5 = value["createdAt"];

          if (intermediateValue5 === null || intermediateValue5 === undefined) {
            intermediateErrorMap5[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue5 !== "object" ||
              Array.isArray(intermediateValue5)
            ) {
              intermediateErrorMap5[`$`] = {
                key: "validator.object",
                value: intermediateValue5,
                foundType: typeof intermediateValue5,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys5 = new Set(["$subtract"]);
              for (const key of Object.keys(intermediateValue5)) {
                if (
                  !knownKeys5.has(key) &&
                  intermediateValue5[key] !== null &&
                  intermediateValue5[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys5];
                  const foundKeys = Object.keys(intermediateValue5);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys5.has(it),
                  );
                  intermediateErrorMap5[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult5 = Object.create(null);

              if (
                intermediateValue5["$subtract"] === null ||
                intermediateValue5["$subtract"] === undefined
              ) {
                intermediateErrorMap5[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString6 = intermediateValue5["$subtract"];
                if (typeof convertedString6 !== "string") {
                  intermediateErrorMap5[`$.$subtract`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString6.length < 1) {
                    intermediateErrorMap5[`$.$subtract`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult5["$subtract"] = convertedString6;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap5).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap5);
          } else {
            hasAnyOfMatch3 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult5;
          }
        }
        if (!hasAnyOfMatch3) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap5 = {};
          /** @type {any} */
          let intermediateResult5 = undefined;
          /** @type {any} */
          let intermediateValue5 = value["createdAt"];

          if (intermediateValue5 === null || intermediateValue5 === undefined) {
            intermediateErrorMap5[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue5 !== "object" ||
              Array.isArray(intermediateValue5)
            ) {
              intermediateErrorMap5[`$`] = {
                key: "validator.object",
                value: intermediateValue5,
                foundType: typeof intermediateValue5,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys5 = new Set(["$add"]);
              for (const key of Object.keys(intermediateValue5)) {
                if (
                  !knownKeys5.has(key) &&
                  intermediateValue5[key] !== null &&
                  intermediateValue5[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys5];
                  const foundKeys = Object.keys(intermediateValue5);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys5.has(it),
                  );
                  intermediateErrorMap5[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult5 = Object.create(null);

              if (
                intermediateValue5["$add"] === null ||
                intermediateValue5["$add"] === undefined
              ) {
                intermediateErrorMap5[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString6 = intermediateValue5["$add"];
                if (typeof convertedString6 !== "string") {
                  intermediateErrorMap5[`$.$add`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString6.length < 1) {
                    intermediateErrorMap5[`$.$add`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult5["$add"] = convertedString6;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap5).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap5);
          } else {
            hasAnyOfMatch3 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult5;
          }
        }
        if (!hasAnyOfMatch3) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap5 = {};
          /** @type {any} */
          let intermediateResult5 = undefined;
          /** @type {any} */
          let intermediateValue5 = value["createdAt"];

          if (intermediateValue5 === null || intermediateValue5 === undefined) {
            intermediateResult5 = undefined;
          } else {
            if (
              typeof intermediateValue5 === "string" ||
              typeof intermediateValue5 === "number"
            ) {
              intermediateResult5 = new Date(intermediateValue5);
            } else if (
              Object.prototype.toString.call(intermediateValue5) ===
              "[object Date]"
            ) {
              intermediateResult5 = intermediateValue5;
            } else {
              intermediateErrorMap5[`$`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(intermediateResult5?.getTime() ?? undefined)) {
              intermediateErrorMap5[`$`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (Object.keys(intermediateErrorMap5).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap5);
          } else {
            hasAnyOfMatch3 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult5;
          }
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = undefined;
      } else {
        let hasAnyOfMatch4 = false;
        errorMap[`$.updatedAt`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch4) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap6 = {};
          /** @type {any} */
          let intermediateResult6 = undefined;
          /** @type {any} */
          let intermediateValue6 = value["updatedAt"];

          if (intermediateValue6 === null || intermediateValue6 === undefined) {
            intermediateErrorMap6[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue6 !== "object" ||
              Array.isArray(intermediateValue6)
            ) {
              intermediateErrorMap6[`$`] = {
                key: "validator.object",
                value: intermediateValue6,
                foundType: typeof intermediateValue6,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys6 = new Set(["$subtract"]);
              for (const key of Object.keys(intermediateValue6)) {
                if (
                  !knownKeys6.has(key) &&
                  intermediateValue6[key] !== null &&
                  intermediateValue6[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys6];
                  const foundKeys = Object.keys(intermediateValue6);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys6.has(it),
                  );
                  intermediateErrorMap6[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult6 = Object.create(null);

              if (
                intermediateValue6["$subtract"] === null ||
                intermediateValue6["$subtract"] === undefined
              ) {
                intermediateErrorMap6[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString7 = intermediateValue6["$subtract"];
                if (typeof convertedString7 !== "string") {
                  intermediateErrorMap6[`$.$subtract`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString7.length < 1) {
                    intermediateErrorMap6[`$.$subtract`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult6["$subtract"] = convertedString7;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap6).length > 0) {
            errorMap[`$.updatedAt`].errors.push(intermediateErrorMap6);
          } else {
            hasAnyOfMatch4 = true;
            delete errorMap[`$.updatedAt`];
            result["updatedAt"] = intermediateResult6;
          }
        }
        if (!hasAnyOfMatch4) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap6 = {};
          /** @type {any} */
          let intermediateResult6 = undefined;
          /** @type {any} */
          let intermediateValue6 = value["updatedAt"];

          if (intermediateValue6 === null || intermediateValue6 === undefined) {
            intermediateErrorMap6[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue6 !== "object" ||
              Array.isArray(intermediateValue6)
            ) {
              intermediateErrorMap6[`$`] = {
                key: "validator.object",
                value: intermediateValue6,
                foundType: typeof intermediateValue6,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys6 = new Set(["$add"]);
              for (const key of Object.keys(intermediateValue6)) {
                if (
                  !knownKeys6.has(key) &&
                  intermediateValue6[key] !== null &&
                  intermediateValue6[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys6];
                  const foundKeys = Object.keys(intermediateValue6);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys6.has(it),
                  );
                  intermediateErrorMap6[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult6 = Object.create(null);

              if (
                intermediateValue6["$add"] === null ||
                intermediateValue6["$add"] === undefined
              ) {
                intermediateErrorMap6[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString7 = intermediateValue6["$add"];
                if (typeof convertedString7 !== "string") {
                  intermediateErrorMap6[`$.$add`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString7.length < 1) {
                    intermediateErrorMap6[`$.$add`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult6["$add"] = convertedString7;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap6).length > 0) {
            errorMap[`$.updatedAt`].errors.push(intermediateErrorMap6);
          } else {
            hasAnyOfMatch4 = true;
            delete errorMap[`$.updatedAt`];
            result["updatedAt"] = intermediateResult6;
          }
        }
        if (!hasAnyOfMatch4) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap6 = {};
          /** @type {any} */
          let intermediateResult6 = undefined;
          /** @type {any} */
          let intermediateValue6 = value["updatedAt"];

          if (intermediateValue6 === null || intermediateValue6 === undefined) {
            intermediateResult6 = undefined;
          } else {
            if (
              typeof intermediateValue6 === "string" ||
              typeof intermediateValue6 === "number"
            ) {
              intermediateResult6 = new Date(intermediateValue6);
            } else if (
              Object.prototype.toString.call(intermediateValue6) ===
              "[object Date]"
            ) {
              intermediateResult6 = intermediateValue6;
            } else {
              intermediateErrorMap6[`$`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(intermediateResult6?.getTime() ?? undefined)) {
              intermediateErrorMap6[`$`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (Object.keys(intermediateErrorMap6).length > 0) {
            errorMap[`$.updatedAt`].errors.push(intermediateErrorMap6);
          } else {
            hasAnyOfMatch4 = true;
            delete errorMap[`$.updatedAt`];
            result["updatedAt"] = intermediateResult6;
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}
