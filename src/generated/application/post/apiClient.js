// Generated by @compas/code-gen

import FormData from "form-data";
import {
  validatePostCreateResponseRouterValidated,
  validatePostListResponseRouterValidated,
  validatePostSingleResponseRouterValidated,
  validatePostUpdateResponseRouterValidated,
} from "../post/validators.js";
import { AppError } from "@compas/stdlib";
/**
 * Tags: []
 *
 * @param {import("axios").AxiosInstance} axiosInstance
 * @param {import("../common/types").PostUpdateParams} params
 * @param {import("../common/types").PostUpdateBody} body
 * @param {import("axios").AxiosRequestConfig & { skipResponseValidation?: boolean }} [requestConfig]
 * @returns {Promise<import("../common/types").PostUpdateResponseRouterValidated>}
 */
export async function apiPostUpdate(
  axiosInstance,
  params,
  body,
  requestConfig,
) {
  const response = await axiosInstance.request({
    url: `post/${params.postId}/update`,
    method: "POST",
    data: body,
    ...requestConfig,
  });
  if (requestConfig?.skipResponseValidation) {
    return response.data;
  }
  const { value, error } = validatePostUpdateResponseRouterValidated(
    response.data,
  );
  if (error) {
    throw AppError.validationError("validator.error", {
      route: { group: "post", name: "update" },
      error,
    });
  } else {
    return value;
  }
}

/**
 * Generated list route for 'post'.
 *
 * Tags: []
 *
 * @param {import("axios").AxiosInstance} axiosInstance
 * @param {import("../common/types").PostListQueryValidatorInput} query
 * @param {import("../common/types").PostListBodyValidatorInput} body
 * @param {import("axios").AxiosRequestConfig & { skipResponseValidation?: boolean }} [requestConfig]
 * @returns {Promise<import("../common/types").PostListResponseRouterValidated>}
 */
export async function apiPostList(axiosInstance, query, body, requestConfig) {
  const response = await axiosInstance.request({
    url: `post/list`,
    method: "POST",
    params: query,
    data: body,
    ...requestConfig,
  });
  if (requestConfig?.skipResponseValidation) {
    return response.data;
  }
  const { value, error } = validatePostListResponseRouterValidated(
    response.data,
  );
  if (error) {
    throw AppError.validationError("validator.error", {
      route: { group: "post", name: "list" },
      error,
    });
  } else {
    return value;
  }
}

/**
 * Generated single route for 'post'.
 *
 * Tags: []
 *
 * @param {import("axios").AxiosInstance} axiosInstance
 * @param {import("../common/types").PostSingleParams} params
 * @param {import("axios").AxiosRequestConfig & { skipResponseValidation?: boolean }} [requestConfig]
 * @returns {Promise<import("../common/types").PostSingleResponseRouterValidated>}
 */
export async function apiPostSingle(axiosInstance, params, requestConfig) {
  const response = await axiosInstance.request({
    url: `post/${params.postId}/single`,
    method: "GET",
    ...requestConfig,
  });
  if (requestConfig?.skipResponseValidation) {
    return response.data;
  }
  const { value, error } = validatePostSingleResponseRouterValidated(
    response.data,
  );
  if (error) {
    throw AppError.validationError("validator.error", {
      route: { group: "post", name: "single" },
      error,
    });
  } else {
    return value;
  }
}

/**
 * Generated create route for 'post'.
 *
 * Tags: []
 *
 * @param {import("axios").AxiosInstance} axiosInstance
 * @param {import("../common/types").PostItemWrite} body
 * @param {import("axios").AxiosRequestConfig & { skipResponseValidation?: boolean }} [requestConfig]
 * @returns {Promise<import("../common/types").PostCreateResponseRouterValidated>}
 */
export async function apiPostCreate(axiosInstance, body, requestConfig) {
  const response = await axiosInstance.request({
    url: `post/create`,
    method: "POST",
    data: body,
    ...requestConfig,
  });
  if (requestConfig?.skipResponseValidation) {
    return response.data;
  }
  const { value, error } = validatePostCreateResponseRouterValidated(
    response.data,
  );
  if (error) {
    throw AppError.validationError("validator.error", {
      route: { group: "post", name: "create" },
      error,
    });
  } else {
    return value;
  }
}
