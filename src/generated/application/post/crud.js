// Generated by @compas/code-gen

import { postHandlers } from "./controller.js";
import {
  postCount,
  postCreate,
  postList,
  postSingle,
  postTransform,
} from "./events.js";
import { newEventFromEvent } from "@compas/stdlib";
/**
 * Register controller implementation for the 'post' routes.
 * @param {{
 *   sql: Postgres,
 *   postListPreModifier?: (event: InsightEvent, ctx: PostListCtx, countBuilder: DatabasePostQueryBuilder, listBuilder: DatabasePostQueryBuilder) => void|Promise<void>,
 *   postSinglePreModifier?: (event: InsightEvent, ctx: PostSingleCtx, singleBuilder: DatabasePostQueryBuilder) => void|Promise<void>,
 *   postCreatePreModifier?: (event: InsightEvent, ctx: PostCreateCtx ) => void|Promise<void>,
 * }} options
 */
export function postRegisterCrud({
  sql,
  postListPreModifier,
  postSinglePreModifier,
  postCreatePreModifier,
}) {
  postHandlers.list = async (ctx) => {
    const countBuilder = {
      select: ["id"],
      orderBy: ctx.validatedBody.orderBy,
      orderBySpec: ctx.validatedBody.orderBySpec,
      where: {},
    };

    countBuilder.where = {
      ...ctx.validatedBody.where,
      ...(countBuilder.where ?? {}),
    };

    const listBuilder = {
      orderBy: ctx.validatedBody.orderBy,
      orderBySpec: ctx.validatedBody.orderBySpec,
      where: {},
    };

    postListPreModifier &&
      (await postListPreModifier(
        newEventFromEvent(ctx.event),
        ctx,
        countBuilder,
        listBuilder,
      ));

    const { total, idIn } = await postCount(
      newEventFromEvent(ctx.event),
      sql,
      countBuilder,
      ctx.validatedQuery,
    );

    listBuilder.where.idIn = idIn;

    const result = await postList(
      newEventFromEvent(ctx.event),
      sql,
      listBuilder,
    );

    ctx.body = {
      total,
      list: result.map((it) => postTransform(it)),
    };
  };

  postHandlers.single = async (ctx) => {
    const builder = {
      where: {
        id: ctx.validatedParams.postId,
      },
    };

    postSinglePreModifier &&
      (await postSinglePreModifier(newEventFromEvent(ctx.event), ctx, builder));

    const item = await postSingle(newEventFromEvent(ctx.event), sql, builder);

    ctx.body = {
      item: postTransform(item),
    };
  };

  postHandlers.create = async (ctx) => {
    postCreatePreModifier &&
      (await postCreatePreModifier(newEventFromEvent(ctx.event), ctx));

    const item = await sql.begin((sql) =>
      postCreate(newEventFromEvent(ctx.event), sql, ctx.validatedBody),
    );

    ctx.body = {
      item: postTransform(item),
    };
  };

  // post
}
