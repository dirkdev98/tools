// Generated by @compas/code-gen

import { queries } from "../common/database.js";
import { queryPost } from "../database/post.js";
import {
  AppError,
  eventStart,
  eventStop,
  newEventFromEvent,
} from "@compas/stdlib";

/**
 * Count function, resolving pagination parameters
 *
 * @param {InsightEvent} event
 * @param {Postgres} sql
 * @param {DatabasePostQueryBuilder} builder
 * @param {PostListQuery} queryParams
 * @returns {Promise<{ total: number, idIn: string[] }>}
 */
export async function postCount(event, sql, builder, queryParams) {
  eventStart(event, "post.count");

  const result = await queryPost(builder).execRaw(sql);

  const total = result.length;
  const slice = result.slice(
    queryParams.offset,
    queryParams.offset + queryParams.limit,
  );

  eventStop(event);

  return {
    total,
    idIn: slice.map((it) => it.id),
  };
}

/**
 * List post entities
 *
 * @param {InsightEvent} event
 * @param {Postgres} sql
 * @param {DatabasePostQueryBuilder} builder
 * @returns {Promise<QueryResultDatabasePost[]>}
 */
export async function postList(event, sql, builder) {
  eventStart(event, "post.list");

  const result = await queryPost(builder).exec(sql);

  eventStop(event);

  return result;
}

/**
 * Find a single post entity
 *
 * @param {InsightEvent} event
 * @param {Postgres} sql
 * @param {DatabasePostQueryBuilder} builder
 * @returns {Promise<QueryResultDatabasePost>}
 */
export async function postSingle(event, sql, builder) {
  eventStart(event, "post.single");

  const result = await queryPost(builder).exec(sql);

  if (result.length !== 1) {
    throw AppError.validationError("post.single.notFound");
  }

  eventStop(event);

  return result[0];
}

/**
 * Create a new post entity
 *
 * @param {InsightEvent} event
 * @param {Postgres} sql
 * @param {PostCreateBody} body
 * @returns {Promise<QueryResultDatabasePost>}
 */
export async function postCreate(event, sql, body) {
  eventStart(event, "post.create");

  const result = await queries.postInsert(sql, body);

  const builder = {
    where: {},
  };
  builder.where.id = result[0].id;
  const _item = await postSingle(newEventFromEvent(event), sql, builder);

  eventStop(event);

  return _item;
}

/**
 * Transform post entity to the response type
 *
 * @param {QueryResultDatabasePost} input
 * @returns {PostItem}
 */
export function postTransform(input) {
  return {
    id: input.id,
    text: input.text,
    title: input.title,
    createdAt: input.createdAt,
    updatedAt: input.updatedAt,
  };
}
