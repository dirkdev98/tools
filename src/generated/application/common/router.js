// Generated by @compas/code-gen

import { compasHandlers } from "../compas/controller.js";
import { validateCompasStructureResponse } from "../compas/validators.js";
import { postHandlers } from "../post/controller.js";
import {
  validatePostCreateResponseRouterValidated,
  validatePostItemWrite,
  validatePostListBody,
  validatePostListQuery,
  validatePostListResponseRouterValidated,
  validatePostSingleParams,
  validatePostSingleResponseRouterValidated,
  validatePostUpdateBody,
  validatePostUpdateParams,
  validatePostUpdateResponseRouterValidated,
} from "../post/validators.js";
import { routeMatcher } from "./route-matcher.js";
import { AppError, eventRename } from "@compas/stdlib";
/**
 * The full router and dispatching
 *
 * @param {import("@compas/server").BodyParserPair} parsers
 * @returns {import("@compas/server").Middleware}
 */
export function router(parsers) {
  const routes = {
    post: {
      update: async (params, ctx, next) => {
        if (ctx.event) {
          eventRename(ctx.event, "router.post.update");
        }
        ctx.request.params = params;
        await parsers.bodyParser(ctx);
        const validatedParams = validatePostUpdateParams(ctx.request.params);
        if (validatedParams.error) {
          throw AppError.validationError(
            "validator.error",
            validatedParams.error,
          );
        } else {
          ctx.validatedParams = validatedParams.value;
        }
        const validatedBody = validatePostUpdateBody(ctx.request.body);
        if (validatedBody.error) {
          throw AppError.validationError(
            "validator.error",
            validatedBody.error,
          );
        } else {
          ctx.validatedBody = validatedBody.value;
        }
        await postHandlers.update(ctx);
        const validatedResponse = validatePostUpdateResponseRouterValidated(
          ctx.body,
        );
        if (validatedResponse.error) {
          throw AppError.serverError({
            message: "Response did not satisfy the response type.",
            route: {
              group: "post",
              name: "update",
            },
            error: validatedResponse.error,
          });
        } else {
          ctx.body = validatedResponse.value;
        }
        return next();
      },
      list: async (params, ctx, next) => {
        if (ctx.event) {
          eventRename(ctx.event, "router.post.list");
        }
        ctx.request.params = params;
        await parsers.bodyParser(ctx);
        const validatedQuery = validatePostListQuery(ctx.request.query);
        if (validatedQuery.error) {
          throw AppError.validationError(
            "validator.error",
            validatedQuery.error,
          );
        } else {
          ctx.validatedQuery = validatedQuery.value;
        }
        const validatedBody = validatePostListBody(ctx.request.body);
        if (validatedBody.error) {
          throw AppError.validationError(
            "validator.error",
            validatedBody.error,
          );
        } else {
          ctx.validatedBody = validatedBody.value;
        }
        await postHandlers.list(ctx);
        const validatedResponse = validatePostListResponseRouterValidated(
          ctx.body,
        );
        if (validatedResponse.error) {
          throw AppError.serverError({
            message: "Response did not satisfy the response type.",
            route: {
              group: "post",
              name: "list",
            },
            error: validatedResponse.error,
          });
        } else {
          ctx.body = validatedResponse.value;
        }
        return next();
      },
      single: async (params, ctx, next) => {
        if (ctx.event) {
          eventRename(ctx.event, "router.post.single");
        }
        ctx.request.params = params;
        const validatedParams = validatePostSingleParams(ctx.request.params);
        if (validatedParams.error) {
          throw AppError.validationError(
            "validator.error",
            validatedParams.error,
          );
        } else {
          ctx.validatedParams = validatedParams.value;
        }
        await postHandlers.single(ctx);
        const validatedResponse = validatePostSingleResponseRouterValidated(
          ctx.body,
        );
        if (validatedResponse.error) {
          throw AppError.serverError({
            message: "Response did not satisfy the response type.",
            route: {
              group: "post",
              name: "single",
            },
            error: validatedResponse.error,
          });
        } else {
          ctx.body = validatedResponse.value;
        }
        return next();
      },
      create: async (params, ctx, next) => {
        if (ctx.event) {
          eventRename(ctx.event, "router.post.create");
        }
        ctx.request.params = params;
        await parsers.bodyParser(ctx);
        const validatedBody = validatePostItemWrite(ctx.request.body);
        if (validatedBody.error) {
          throw AppError.validationError(
            "validator.error",
            validatedBody.error,
          );
        } else {
          ctx.validatedBody = validatedBody.value;
        }
        await postHandlers.create(ctx);
        const validatedResponse = validatePostCreateResponseRouterValidated(
          ctx.body,
        );
        if (validatedResponse.error) {
          throw AppError.serverError({
            message: "Response did not satisfy the response type.",
            route: {
              group: "post",
              name: "create",
            },
            error: validatedResponse.error,
          });
        } else {
          ctx.body = validatedResponse.value;
        }
        return next();
      },
    },
    compas: {
      structure: async (params, ctx, next) => {
        if (ctx.event) {
          eventRename(ctx.event, "router.compas.structure");
        }
        ctx.request.params = params;
        await compasHandlers.structure(ctx);
        const validatedResponse = validateCompasStructureResponse(ctx.body);
        if (validatedResponse.error) {
          throw AppError.serverError({
            message: "Response did not satisfy the response type.",
            route: {
              group: "compas",
              name: "structure",
            },
            error: validatedResponse.error,
          });
        } else {
          ctx.body = validatedResponse.value;
        }
        return next();
      },
    },
  };

  return function (ctx, next) {
    const match = routeMatcher(ctx.method, ctx.path);

    if (!match) {
      throw AppError.notFound();
    }

    if (match.params) {
      for (const [key, value] of Object.entries(match.params)) {
        try {
          match.params[key] = decodeURIComponent(value);
        } catch (e) {
          throw AppError.validationError("router.param.invalidEncoding", {
            key,
            value,
          });
        }
      }
    }
    return routes[match.route.group][match.route.name](match.params, ctx, next);
  };
}
compasHandlers.structure = (ctx) => {
  ctx.set("Content-Type", "application/json");

  ctx.body = `{"post":{"update":{"docString":"","isOptional":false,"validator":{},"sql":{},"type":"route","group":"post","name":"update","method":"POST","path":"post/:postId/update","tags":[],"idempotent":false,"invalidations":[{"type":"routeInvalidation","target":{"group":"post","name":"list"},"properties":{}},{"type":"routeInvalidation","target":{"group":"post","name":"single"},"properties":{"useSharedParams":true,"specification":{"params":{"postId":["params","postId"]},"query":{}}}}],"body":{"type":"reference","docString":"","isOptional":false,"sql":{},"validator":{},"reference":{"group":"post","name":"updateBody"}},"response":{"type":"reference","docString":"","isOptional":false,"sql":{},"validator":{},"reference":{"group":"post","name":"updateResponse"}},"params":{"type":"reference","docString":"","isOptional":false,"sql":{},"validator":{},"reference":{"group":"post","name":"updateParams"}}},"updateParams":{"docString":"","isOptional":false,"validator":{"allowNull":false,"strict":true},"sql":{},"type":"object","relations":[],"keys":{"postId":{"docString":"","isOptional":false,"validator":{"allowNull":false},"sql":{},"type":"uuid"}},"group":"post","name":"updateParams"},"updateBody":{"docString":"","isOptional":false,"validator":{"allowNull":false,"strict":true},"sql":{},"type":"object","relations":[],"keys":{"text":{"docString":"","isOptional":false,"validator":{"convert":false,"allowNull":false,"trim":false,"lowerCase":false,"upperCase":false,"min":10},"sql":{},"type":"string"}},"group":"post","name":"updateBody"},"updateResponse":{"docString":"","isOptional":false,"validator":{"allowNull":false,"strict":true},"sql":{},"type":"object","relations":[],"keys":{"success":{"docString":"","isOptional":false,"validator":{"convert":false,"allowNull":false},"sql":{},"type":"boolean","oneOf":true}},"group":"post","name":"updateResponse"},"list":{"type":"route","group":"post","name":"list","idempotent":true,"path":"/post/list","method":"POST","tags":[],"invalidations":[],"docString":"Generated list route for 'post'.","query":{"docString":"","isOptional":false,"validator":{},"sql":{},"type":"reference","reference":{"group":"post","name":"listQuery","uniqueName":"PostListQuery"}},"body":{"docString":"","isOptional":false,"validator":{},"sql":{},"type":"reference","reference":{"group":"post","name":"listBody","uniqueName":"PostListBody"}},"response":{"docString":"","isOptional":false,"validator":{},"sql":{},"type":"reference","reference":{"group":"post","name":"listResponse","uniqueName":"PostListResponse"}}},"listQuery":{"docString":"","isOptional":false,"validator":{"allowNull":false,"strict":true},"sql":{},"type":"object","group":"post","name":"listQuery","relations":[],"keys":{"offset":{"docString":"","isOptional":true,"validator":{"convert":true,"allowNull":false,"floatingPoint":false,"min":-2147483647,"max":2147483647},"sql":{},"type":"number","defaultValue":"0"},"limit":{"docString":"","isOptional":true,"validator":{"convert":true,"allowNull":false,"floatingPoint":false,"max":5000},"sql":{},"type":"number","defaultValue":"50"}}},"listBody":{"docString":"","isOptional":false,"validator":{"allowNull":false,"strict":true},"sql":{},"type":"object","group":"post","name":"listBody","relations":[],"keys":{"where":{"docString":"","isOptional":true,"validator":{"allowNull":false,"strict":true},"sql":{},"type":"object","relations":[],"keys":{"id":{"docString":"","isOptional":true,"validator":{"allowNull":false},"sql":{"searchable":true,"primary":true},"type":"uuid"},"idNotEqual":{"docString":"","isOptional":true,"validator":{"allowNull":false},"sql":{"searchable":true,"primary":true},"type":"uuid"},"idIn":{"docString":"","isOptional":false,"validator":{"convert":false},"sql":{},"type":"array","values":{"docString":"","isOptional":false,"validator":{"allowNull":false},"sql":{"searchable":true,"primary":true},"type":"uuid"}},"idNotIn":{"docString":"","isOptional":false,"validator":{"convert":false},"sql":{},"type":"array","values":{"docString":"","isOptional":false,"validator":{"allowNull":false},"sql":{"searchable":true,"primary":true},"type":"uuid"}},"title":{"docString":"","isOptional":true,"validator":{"convert":false,"allowNull":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1},"sql":{"searchable":true},"type":"string"},"titleNotEqual":{"docString":"","isOptional":true,"validator":{"convert":false,"allowNull":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1},"sql":{"searchable":true},"type":"string"},"titleIn":{"docString":"","isOptional":false,"validator":{"convert":false},"sql":{},"type":"array","values":{"docString":"","isOptional":false,"validator":{"convert":false,"allowNull":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1},"sql":{"searchable":true},"type":"string"}},"titleNotIn":{"docString":"","isOptional":false,"validator":{"convert":false},"sql":{},"type":"array","values":{"docString":"","isOptional":false,"validator":{"convert":false,"allowNull":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1},"sql":{"searchable":true},"type":"string"}},"titleLike":{"docString":"","isOptional":true,"validator":{"convert":false,"allowNull":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1},"sql":{"searchable":true},"type":"string"},"titleILike":{"docString":"","isOptional":true,"validator":{"convert":false,"allowNull":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1},"sql":{"searchable":true},"type":"string"},"titleNotLike":{"docString":"","isOptional":true,"validator":{"convert":false,"allowNull":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1},"sql":{"searchable":true},"type":"string"},"createdAt":{"docString":"","isOptional":true,"validator":{"allowNull":false},"sql":{"hasDefaultValue":true,"searchable":true},"type":"date"},"createdAtNotEqual":{"docString":"","isOptional":true,"validator":{"allowNull":false},"sql":{"hasDefaultValue":true,"searchable":true},"type":"date"},"createdAtIn":{"docString":"","isOptional":false,"validator":{"convert":false},"sql":{},"type":"array","values":{"docString":"","isOptional":false,"validator":{"allowNull":false},"sql":{"hasDefaultValue":true,"searchable":true},"type":"date"}},"createdAtNotIn":{"docString":"","isOptional":false,"validator":{"convert":false},"sql":{},"type":"array","values":{"docString":"","isOptional":false,"validator":{"allowNull":false},"sql":{"hasDefaultValue":true,"searchable":true},"type":"date"}},"createdAtGreaterThan":{"docString":"","isOptional":true,"validator":{"allowNull":false},"sql":{"hasDefaultValue":true,"searchable":true},"type":"date"},"createdAtLowerThan":{"docString":"","isOptional":true,"validator":{"allowNull":false},"sql":{"hasDefaultValue":true,"searchable":true},"type":"date"},"updatedAt":{"docString":"","isOptional":true,"validator":{"allowNull":false},"sql":{"hasDefaultValue":true,"searchable":true},"type":"date"},"updatedAtNotEqual":{"docString":"","isOptional":true,"validator":{"allowNull":false},"sql":{"hasDefaultValue":true,"searchable":true},"type":"date"},"updatedAtIn":{"docString":"","isOptional":false,"validator":{"convert":false},"sql":{},"type":"array","values":{"docString":"","isOptional":false,"validator":{"allowNull":false},"sql":{"hasDefaultValue":true,"searchable":true},"type":"date"}},"updatedAtNotIn":{"docString":"","isOptional":false,"validator":{"convert":false},"sql":{},"type":"array","values":{"docString":"","isOptional":false,"validator":{"allowNull":false},"sql":{"hasDefaultValue":true,"searchable":true},"type":"date"}},"updatedAtGreaterThan":{"docString":"","isOptional":true,"validator":{"allowNull":false},"sql":{"hasDefaultValue":true,"searchable":true},"type":"date"},"updatedAtLowerThan":{"docString":"","isOptional":true,"validator":{"allowNull":false},"sql":{"hasDefaultValue":true,"searchable":true},"type":"date"}}},"orderBy":{"docString":"","isOptional":true,"validator":{"convert":false},"sql":{},"type":"array","values":{"docString":"","isOptional":false,"validator":{"convert":false,"allowNull":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1},"sql":{},"type":"string","oneOf":["id","title","createdAt","updatedAt"]}},"orderBySpec":{"docString":"","isOptional":true,"validator":{"allowNull":false,"strict":true},"sql":{},"type":"object","relations":[],"keys":{"id":{"docString":"","isOptional":true,"validator":{"convert":false,"allowNull":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1},"sql":{},"type":"string","oneOf":["ASC","DESC"]},"title":{"docString":"","isOptional":true,"validator":{"convert":false,"allowNull":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1},"sql":{},"type":"string","oneOf":["ASC","DESC"]},"createdAt":{"docString":"","isOptional":true,"validator":{"convert":false,"allowNull":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1},"sql":{},"type":"string","oneOf":["ASC","DESC"]},"updatedAt":{"docString":"","isOptional":true,"validator":{"convert":false,"allowNull":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1},"sql":{},"type":"string","oneOf":["ASC","DESC"]}}}}},"listResponse":{"docString":"","isOptional":false,"validator":{"allowNull":false,"strict":true},"sql":{},"type":"object","group":"post","name":"listResponse","relations":[],"keys":{"list":{"docString":"","isOptional":false,"validator":{"convert":false},"sql":{},"type":"array","values":{"docString":"","isOptional":false,"validator":{},"sql":{},"type":"reference","reference":{"group":"post","name":"item","uniqueName":"PostItem"}}},"total":{"docString":"","isOptional":false,"validator":{"convert":false,"allowNull":false,"floatingPoint":false,"min":-2147483647,"max":2147483647},"sql":{},"type":"number"}}},"item":{"docString":"","isOptional":false,"validator":{"allowNull":false,"strict":true},"sql":{},"type":"object","group":"post","name":"item","relations":[],"keys":{"id":{"docString":"The primary key of the 'post' model.","isOptional":false,"validator":{"allowNull":false},"sql":{"searchable":true,"primary":true},"type":"uuid"},"text":{"docString":"","isOptional":false,"validator":{"convert":false,"allowNull":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1},"sql":{},"type":"string"},"title":{"docString":"","isOptional":false,"validator":{"convert":false,"allowNull":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1},"sql":{"searchable":true},"type":"string"},"createdAt":{"docString":"Automatically generated 'createdAt', containing an ISO timestamp.","isOptional":false,"validator":{"allowNull":false},"sql":{"hasDefaultValue":true,"searchable":true},"type":"date"},"updatedAt":{"docString":"Automatically generated 'updatedAt', containing an ISO timestamp.","isOptional":false,"validator":{"allowNull":false},"sql":{"hasDefaultValue":true,"searchable":true},"type":"date"}}},"single":{"type":"route","group":"post","name":"single","idempotent":false,"path":"/post/:postId/single","method":"GET","tags":[],"invalidations":[],"docString":"Generated single route for 'post'.","params":{"docString":"","isOptional":false,"validator":{},"sql":{},"type":"reference","reference":{"group":"post","name":"singleParams","uniqueName":"PostSingleParams"}},"response":{"docString":"","isOptional":false,"validator":{},"sql":{},"type":"reference","reference":{"group":"post","name":"singleResponse","uniqueName":"PostSingleResponse"}}},"singleParams":{"docString":"","isOptional":false,"validator":{"allowNull":false,"strict":true},"sql":{},"type":"object","relations":[],"keys":{"postId":{"docString":"The primary key of the 'post' model.","isOptional":false,"validator":{"allowNull":false},"sql":{"searchable":true,"primary":true},"type":"uuid"}},"group":"post","name":"singleParams"},"singleResponse":{"docString":"","isOptional":false,"validator":{"allowNull":false,"strict":true},"sql":{},"type":"object","group":"post","name":"singleResponse","relations":[],"keys":{"item":{"docString":"","isOptional":false,"validator":{},"sql":{},"type":"reference","reference":{"group":"post","name":"item","uniqueName":"PostItem"}}}},"create":{"type":"route","group":"post","name":"create","idempotent":false,"path":"/post/create","method":"POST","tags":[],"invalidations":[{"type":"routeInvalidation","target":{"group":"post","name":"list"},"properties":{"useSharedParams":true,"useSharedQuery":false,"specification":{"params":{},"query":{}}}}],"docString":"Generated create route for 'post'.","body":{"docString":"","isOptional":false,"validator":{},"sql":{},"type":"reference","reference":{"group":"post","name":"itemWrite","uniqueName":"PostItemWrite"}},"response":{"docString":"","isOptional":false,"validator":{},"sql":{},"type":"reference","reference":{"group":"post","name":"createResponse","uniqueName":"PostCreateResponse"}}},"itemWrite":{"docString":"","isOptional":false,"validator":{"allowNull":false,"strict":true},"sql":{},"type":"object","group":"post","name":"itemWrite","relations":[],"keys":{"text":{"docString":"","isOptional":false,"validator":{"convert":false,"allowNull":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1},"sql":{},"type":"string"},"title":{"docString":"","isOptional":false,"validator":{"convert":false,"allowNull":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1},"sql":{"searchable":true},"type":"string"}}},"createResponse":{"docString":"","isOptional":false,"validator":{"allowNull":false,"strict":true},"sql":{},"type":"object","group":"post","name":"createResponse","relations":[],"keys":{"item":{"docString":"","isOptional":false,"validator":{},"sql":{},"type":"reference","reference":{"group":"post","name":"item","uniqueName":"PostItem"}}}}}}`;
};
