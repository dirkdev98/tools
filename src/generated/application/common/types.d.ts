// Generated by @compas/code-gen

export type DatabasePost = {
  // The primary key of the 'post' model.
  id: string;
  text: string;
  title: string;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt: Date;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt: Date;
};

export type DatabasePostInput = {
  // The primary key of the 'post' model.
  id: string;
  text: string;
  title: string;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt: Date | string | number;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt: Date | string | number;
};

export type DatabasePostWhere = {
  $raw?: (any | import("@compas/store").QueryPart<any>) | undefined;
  $or?: DatabasePostWhere[] | DatabasePostWhere | undefined;
  id?: string | undefined;
  idNotEqual?: string | undefined;
  idIn?:
    | string[]
    | string
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  idNotIn?:
    | string[]
    | string
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  title?: string | undefined;
  titleNotEqual?: string | undefined;
  titleIn?:
    | string[]
    | string
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  titleNotIn?:
    | string[]
    | string
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  titleLike?: string | undefined;
  titleILike?: string | undefined;
  titleNotLike?: string | undefined;
  createdAt?: Date | string | number | undefined;
  createdAtNotEqual?: Date | string | number | undefined;
  createdAtIn?:
    | (Date | string | number)[]
    | Date
    | string
    | number
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  createdAtNotIn?:
    | (Date | string | number)[]
    | Date
    | string
    | number
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  createdAtGreaterThan?: Date | string | number | undefined;
  createdAtLowerThan?: Date | string | number | undefined;
  updatedAt?: Date | string | number | undefined;
  updatedAtNotEqual?: Date | string | number | undefined;
  updatedAtIn?:
    | (Date | string | number)[]
    | Date
    | string
    | number
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  updatedAtNotIn?:
    | (Date | string | number)[]
    | Date
    | string
    | number
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  updatedAtGreaterThan?: Date | string | number | undefined;
  updatedAtLowerThan?: Date | string | number | undefined;
};

export type DatabasePostWhereValidated = {
  $raw?: import("@compas/store").QueryPart<any> | undefined;
  $or?: DatabasePostWhereValidated[] | undefined;
  id?: string | undefined;
  idNotEqual?: string | undefined;
  idIn?: string[] | import("@compas/store").QueryPart<any> | undefined;
  idNotIn?: string[] | import("@compas/store").QueryPart<any> | undefined;
  title?: string | undefined;
  titleNotEqual?: string | undefined;
  titleIn?: string[] | import("@compas/store").QueryPart<any> | undefined;
  titleNotIn?: string[] | import("@compas/store").QueryPart<any> | undefined;
  titleLike?: string | undefined;
  titleILike?: string | undefined;
  titleNotLike?: string | undefined;
  createdAt?: Date | undefined;
  createdAtNotEqual?: Date | undefined;
  createdAtIn?: Date[] | import("@compas/store").QueryPart<any> | undefined;
  createdAtNotIn?: Date[] | import("@compas/store").QueryPart<any> | undefined;
  createdAtGreaterThan?: Date | undefined;
  createdAtLowerThan?: Date | undefined;
  updatedAt?: Date | undefined;
  updatedAtNotEqual?: Date | undefined;
  updatedAtIn?: Date[] | import("@compas/store").QueryPart<any> | undefined;
  updatedAtNotIn?: Date[] | import("@compas/store").QueryPart<any> | undefined;
  updatedAtGreaterThan?: Date | undefined;
  updatedAtLowerThan?: Date | undefined;
};

export type DatabasePostOrderBy =
  | (any | import("@compas/store").QueryPart<any>)
  | ("id" | "title" | "createdAt" | "updatedAt")[]
  | "id"
  | "title"
  | "createdAt"
  | "updatedAt";

export type DatabasePostOrderByValidated =
  | import("@compas/store").QueryPart<any>
  | ("id" | "title" | "createdAt" | "updatedAt")[];

export type DatabasePostOrderBySpec = {
  id?: "ASC" | "DESC" | undefined;
  title?: "ASC" | "DESC" | undefined;
  createdAt?: "ASC" | "DESC" | undefined;
  updatedAt?: "ASC" | "DESC" | undefined;
};

export type DatabasePostReturning =
  | "*"
  | ("id" | "text" | "title" | "createdAt" | "updatedAt")[]
  | "id"
  | "text"
  | "title"
  | "createdAt"
  | "updatedAt"
  | undefined;

export type DatabasePostQueryBuilder = {
  where?: DatabasePostWhere | undefined;
  orderBy?: DatabasePostOrderBy | undefined;
  orderBySpec?: DatabasePostOrderBySpec | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  select?: DatabasePostReturning | undefined;
};

export type DatabasePostReturningValidated =
  | "*"
  | ("id" | "text" | "title" | "createdAt" | "updatedAt")[]
  | undefined;

export type DatabasePostQueryBuilderValidated = {
  where?: DatabasePostWhereValidated | undefined;
  orderBy?: DatabasePostOrderByValidated | undefined;
  orderBySpec?: DatabasePostOrderBySpec | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  select: DatabasePostReturningValidated;
};

export type QueryResultDatabasePost = {
  // The primary key of the 'post' model.
  id: string;
  text: string;
  title: string;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt: Date;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt: Date;
};

export type QueryResultDatabasePostInput = {
  // The primary key of the 'post' model.
  id: string;
  text: string;
  title: string;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt: Date | string | number;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt: Date | string | number;
};

export type DatabasePostInsertPartial = {
  // The primary key of the 'post' model.
  id?: string | undefined;
  text: string;
  title: string;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt?: Date | string | number | undefined | null;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt?: Date | string | number | undefined | null;
};

export type DatabasePostInsert = {
  insert: DatabasePostInsertPartial[] | DatabasePostInsertPartial;
  returning?: DatabasePostReturning | undefined;
};

export type DatabasePostInsertPartialValidated = {
  // The primary key of the 'post' model.
  id?: string | undefined;
  text: string;
  title: string;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt?: Date | undefined | null;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt?: Date | undefined | null;
};

export type DatabasePostInsertValidated = {
  insert: DatabasePostInsertPartialValidated[];
  returning?: DatabasePostReturningValidated | undefined;
};

export type DatabasePostUpdatePartial = {
  text?:
    | {
        $append: string;
      }
    | string
    | undefined;
  title?:
    | {
        $append: string;
      }
    | string
    | undefined;
  createdAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | string
    | number
    | undefined;
  updatedAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | string
    | number
    | undefined;
};

export type DatabasePostUpdate = {
  update: DatabasePostUpdatePartial;
  where: DatabasePostWhere;
  returning?: DatabasePostReturning | undefined;
};

export type DatabasePostUpdatePartialValidated = {
  text?:
    | {
        $append: string;
      }
    | string
    | undefined;
  title?:
    | {
        $append: string;
      }
    | string
    | undefined;
  createdAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | undefined;
  updatedAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | undefined;
};

export type DatabasePostUpdateValidated = {
  update: DatabasePostUpdatePartialValidated;
  where: DatabasePostWhereValidated;
  returning?: DatabasePostReturningValidated | undefined;
};

// User definable, optional object to store whatever you want
export type StoreFileMeta = {
  transforms?: any | undefined;
  transformedFromOriginal?: string | undefined;
  placeholderImage?: string | undefined;
  altText?: string | undefined;
};

// Postgres based file storage.
export type StoreFile = {
  // The primary key of the 'file' model.
  id: string;
  contentLength: number;
  bucketName: string;
  contentType: string;
  name: string;
  meta: StoreFileMeta;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt: Date;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt: Date;
};

// User definable, optional object to store whatever you want
export type StoreFileMetaInput =
  | {
      transforms?: any | undefined;
      transformedFromOriginal?: string | undefined;
      placeholderImage?: string | undefined;
      altText?: string | undefined;
    }
  | undefined;

// Postgres based file storage.
export type StoreFileInput = {
  // The primary key of the 'file' model.
  id: string;
  contentLength: number;
  bucketName: string;
  contentType: string;
  name: string;
  meta?: StoreFileMetaInput | undefined;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt: Date | string | number;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt: Date | string | number;
};

export type StoreFileWhere = {
  $raw?: (any | import("@compas/store").QueryPart<any>) | undefined;
  $or?: StoreFileWhere[] | StoreFileWhere | undefined;
  id?: string | undefined;
  idNotEqual?: string | undefined;
  idIn?:
    | string[]
    | string
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  idNotIn?:
    | string[]
    | string
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  bucketName?: string | undefined;
  bucketNameNotEqual?: string | undefined;
  bucketNameIn?:
    | string[]
    | string
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  bucketNameNotIn?:
    | string[]
    | string
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  bucketNameLike?: string | undefined;
  bucketNameILike?: string | undefined;
  bucketNameNotLike?: string | undefined;
  createdAt?: Date | string | number | undefined;
  createdAtNotEqual?: Date | string | number | undefined;
  createdAtIn?:
    | (Date | string | number)[]
    | Date
    | string
    | number
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  createdAtNotIn?:
    | (Date | string | number)[]
    | Date
    | string
    | number
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  createdAtGreaterThan?: Date | string | number | undefined;
  createdAtLowerThan?: Date | string | number | undefined;
  updatedAt?: Date | string | number | undefined;
  updatedAtNotEqual?: Date | string | number | undefined;
  updatedAtIn?:
    | (Date | string | number)[]
    | Date
    | string
    | number
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  updatedAtNotIn?:
    | (Date | string | number)[]
    | Date
    | string
    | number
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  updatedAtGreaterThan?: Date | string | number | undefined;
  updatedAtLowerThan?: Date | string | number | undefined;
};

export type StoreFileWhereValidated = {
  $raw?: import("@compas/store").QueryPart<any> | undefined;
  $or?: StoreFileWhereValidated[] | undefined;
  id?: string | undefined;
  idNotEqual?: string | undefined;
  idIn?: string[] | import("@compas/store").QueryPart<any> | undefined;
  idNotIn?: string[] | import("@compas/store").QueryPart<any> | undefined;
  bucketName?: string | undefined;
  bucketNameNotEqual?: string | undefined;
  bucketNameIn?: string[] | import("@compas/store").QueryPart<any> | undefined;
  bucketNameNotIn?:
    | string[]
    | import("@compas/store").QueryPart<any>
    | undefined;
  bucketNameLike?: string | undefined;
  bucketNameILike?: string | undefined;
  bucketNameNotLike?: string | undefined;
  createdAt?: Date | undefined;
  createdAtNotEqual?: Date | undefined;
  createdAtIn?: Date[] | import("@compas/store").QueryPart<any> | undefined;
  createdAtNotIn?: Date[] | import("@compas/store").QueryPart<any> | undefined;
  createdAtGreaterThan?: Date | undefined;
  createdAtLowerThan?: Date | undefined;
  updatedAt?: Date | undefined;
  updatedAtNotEqual?: Date | undefined;
  updatedAtIn?: Date[] | import("@compas/store").QueryPart<any> | undefined;
  updatedAtNotIn?: Date[] | import("@compas/store").QueryPart<any> | undefined;
  updatedAtGreaterThan?: Date | undefined;
  updatedAtLowerThan?: Date | undefined;
};

export type StoreFileOrderBy =
  | (any | import("@compas/store").QueryPart<any>)
  | ("id" | "bucketName" | "createdAt" | "updatedAt")[]
  | "id"
  | "bucketName"
  | "createdAt"
  | "updatedAt";

export type StoreFileOrderByValidated =
  | import("@compas/store").QueryPart<any>
  | ("id" | "bucketName" | "createdAt" | "updatedAt")[];

export type StoreFileOrderBySpec = {
  id?: "ASC" | "DESC" | undefined;
  bucketName?: "ASC" | "DESC" | undefined;
  createdAt?: "ASC" | "DESC" | undefined;
  updatedAt?: "ASC" | "DESC" | undefined;
};

export type StoreFileReturning =
  | "*"
  | (
      | "id"
      | "contentLength"
      | "bucketName"
      | "contentType"
      | "name"
      | "meta"
      | "createdAt"
      | "updatedAt"
    )[]
  | "id"
  | "contentLength"
  | "bucketName"
  | "contentType"
  | "name"
  | "meta"
  | "createdAt"
  | "updatedAt"
  | undefined;

export type StoreFileQueryBuilder = {
  where?: StoreFileWhere | undefined;
  orderBy?: StoreFileOrderBy | undefined;
  orderBySpec?: StoreFileOrderBySpec | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  select?: StoreFileReturning | undefined;
};

export type StoreFileReturningValidated =
  | "*"
  | (
      | "id"
      | "contentLength"
      | "bucketName"
      | "contentType"
      | "name"
      | "meta"
      | "createdAt"
      | "updatedAt"
    )[]
  | undefined;

export type StoreFileQueryBuilderValidated = {
  where?: StoreFileWhereValidated | undefined;
  orderBy?: StoreFileOrderByValidated | undefined;
  orderBySpec?: StoreFileOrderBySpec | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  select: StoreFileReturningValidated;
};

export type QueryResultStoreFile = {
  // The primary key of the 'file' model.
  id: string;
  contentLength: number;
  bucketName: string;
  contentType: string;
  name: string;
  meta: StoreFileMeta;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt: Date;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt: Date;
};

export type QueryResultStoreFileInput = {
  // The primary key of the 'file' model.
  id: string;
  contentLength: number;
  bucketName: string;
  contentType: string;
  name: string;
  meta?: StoreFileMetaInput | undefined;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt: Date | string | number;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt: Date | string | number;
};

export type StoreFileInsertPartial = {
  // The primary key of the 'file' model.
  id?: string | undefined;
  contentLength: number;
  bucketName: string;
  contentType: string;
  name: string;
  meta?: StoreFileMetaInput | undefined | null;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt?: Date | string | number | undefined | null;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt?: Date | string | number | undefined | null;
};

export type StoreFileInsert = {
  insert: StoreFileInsertPartial[] | StoreFileInsertPartial;
  returning?: StoreFileReturning | undefined;
};

export type StoreFileInsertPartialValidated = {
  // The primary key of the 'file' model.
  id?: string | undefined;
  contentLength: number;
  bucketName: string;
  contentType: string;
  name: string;
  meta: StoreFileMeta;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt?: Date | undefined | null;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt?: Date | undefined | null;
};

export type StoreFileInsertValidated = {
  insert: StoreFileInsertPartialValidated[];
  returning?: StoreFileReturningValidated | undefined;
};

export type StoreFileUpdatePartial = {
  contentLength?:
    | {
        $divide: number;
      }
    | {
        $multiply: number;
      }
    | {
        $subtract: number;
      }
    | {
        $add: number;
      }
    | number
    | undefined;
  bucketName?:
    | {
        $append: string;
      }
    | string
    | undefined;
  contentType?:
    | {
        $append: string;
      }
    | string
    | undefined;
  name?:
    | {
        $append: string;
      }
    | string
    | undefined;
  meta?:
    | {
        $set: {
          path: (number | string)[] | number | string;
          value: any;
        };
      }
    | {
        $remove: {
          path: (number | string)[] | number | string;
        };
      }
    | StoreFileMetaInput
    | undefined
    | null;
  createdAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | string
    | number
    | undefined;
  updatedAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | string
    | number
    | undefined;
};

export type StoreFileUpdate = {
  update: StoreFileUpdatePartial;
  where: StoreFileWhere;
  returning?: StoreFileReturning | undefined;
};

export type StoreFileUpdatePartialValidated = {
  contentLength?:
    | {
        $divide: number;
      }
    | {
        $multiply: number;
      }
    | {
        $subtract: number;
      }
    | {
        $add: number;
      }
    | number
    | undefined;
  bucketName?:
    | {
        $append: string;
      }
    | string
    | undefined;
  contentType?:
    | {
        $append: string;
      }
    | string
    | undefined;
  name?:
    | {
        $append: string;
      }
    | string
    | undefined;
  meta?:
    | {
        $set: {
          path: (number | string)[];
          value: any;
        };
      }
    | {
        $remove: {
          path: (number | string)[];
        };
      }
    | StoreFileMeta;
  createdAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | undefined;
  updatedAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | undefined;
};

export type StoreFileUpdateValidated = {
  update: StoreFileUpdatePartialValidated;
  where: StoreFileWhereValidated;
  returning?: StoreFileReturningValidated | undefined;
};

// Postgres based job queue.
// Use {@link queueWorkerAddJob} to insert new jobs in to the queue and {@link queueWorkerRegisterCronJobs} for all your recurring jobs.
// Use {@link queueWorkerCreate} as a way to pick up jobs.
export type StoreJob = {
  id: number;
  isComplete: boolean;
  handlerTimeout?: number | undefined;
  priority: number;
  retryCount: number;
  name: string;
  scheduledAt: Date;
  data: any;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt: Date;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt: Date;
};

// Postgres based job queue.
// Use {@link queueWorkerAddJob} to insert new jobs in to the queue and {@link queueWorkerRegisterCronJobs} for all your recurring jobs.
// Use {@link queueWorkerCreate} as a way to pick up jobs.
export type StoreJobInput = {
  id: number;
  isComplete?: boolean | "true" | "false" | undefined;
  handlerTimeout?: number | undefined;
  priority?: number | undefined;
  retryCount?: number | undefined;
  name: string;
  scheduledAt?: Date | string | number | undefined;
  data?: any | undefined;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt: Date | string | number;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt: Date | string | number;
};

export type StoreJobWhere = {
  $raw?: (any | import("@compas/store").QueryPart<any>) | undefined;
  $or?: StoreJobWhere[] | StoreJobWhere | undefined;
  id?: number | undefined;
  idNotEqual?: number | undefined;
  idIn?:
    | number[]
    | number
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  idNotIn?:
    | number[]
    | number
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  idGreaterThan?: number | undefined;
  idLowerThan?: number | undefined;
  isComplete?: boolean | "true" | "false" | undefined;
  isCompleteIsNull?: boolean | "true" | "false" | undefined;
  isCompleteIsNotNull?: boolean | "true" | "false" | undefined;
  name?: string | undefined;
  nameNotEqual?: string | undefined;
  nameIn?:
    | string[]
    | string
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  nameNotIn?:
    | string[]
    | string
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  nameLike?: string | undefined;
  nameILike?: string | undefined;
  nameNotLike?: string | undefined;
  scheduledAt?: Date | string | number | undefined;
  scheduledAtNotEqual?: Date | string | number | undefined;
  scheduledAtIn?:
    | (Date | string | number)[]
    | Date
    | string
    | number
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  scheduledAtNotIn?:
    | (Date | string | number)[]
    | Date
    | string
    | number
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  scheduledAtGreaterThan?: Date | string | number | undefined;
  scheduledAtLowerThan?: Date | string | number | undefined;
  scheduledAtIsNull?: boolean | "true" | "false" | undefined;
  scheduledAtIsNotNull?: boolean | "true" | "false" | undefined;
  createdAt?: Date | string | number | undefined;
  createdAtNotEqual?: Date | string | number | undefined;
  createdAtIn?:
    | (Date | string | number)[]
    | Date
    | string
    | number
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  createdAtNotIn?:
    | (Date | string | number)[]
    | Date
    | string
    | number
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  createdAtGreaterThan?: Date | string | number | undefined;
  createdAtLowerThan?: Date | string | number | undefined;
  updatedAt?: Date | string | number | undefined;
  updatedAtNotEqual?: Date | string | number | undefined;
  updatedAtIn?:
    | (Date | string | number)[]
    | Date
    | string
    | number
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  updatedAtNotIn?:
    | (Date | string | number)[]
    | Date
    | string
    | number
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  updatedAtGreaterThan?: Date | string | number | undefined;
  updatedAtLowerThan?: Date | string | number | undefined;
};

export type StoreJobWhereValidated = {
  $raw?: import("@compas/store").QueryPart<any> | undefined;
  $or?: StoreJobWhereValidated[] | undefined;
  id?: number | undefined;
  idNotEqual?: number | undefined;
  idIn?: number[] | import("@compas/store").QueryPart<any> | undefined;
  idNotIn?: number[] | import("@compas/store").QueryPart<any> | undefined;
  idGreaterThan?: number | undefined;
  idLowerThan?: number | undefined;
  isComplete?: boolean | undefined;
  isCompleteIsNull?: boolean | undefined;
  isCompleteIsNotNull?: boolean | undefined;
  name?: string | undefined;
  nameNotEqual?: string | undefined;
  nameIn?: string[] | import("@compas/store").QueryPart<any> | undefined;
  nameNotIn?: string[] | import("@compas/store").QueryPart<any> | undefined;
  nameLike?: string | undefined;
  nameILike?: string | undefined;
  nameNotLike?: string | undefined;
  scheduledAt?: Date | undefined;
  scheduledAtNotEqual?: Date | undefined;
  scheduledAtIn?: Date[] | import("@compas/store").QueryPart<any> | undefined;
  scheduledAtNotIn?:
    | Date[]
    | import("@compas/store").QueryPart<any>
    | undefined;
  scheduledAtGreaterThan?: Date | undefined;
  scheduledAtLowerThan?: Date | undefined;
  scheduledAtIsNull?: boolean | undefined;
  scheduledAtIsNotNull?: boolean | undefined;
  createdAt?: Date | undefined;
  createdAtNotEqual?: Date | undefined;
  createdAtIn?: Date[] | import("@compas/store").QueryPart<any> | undefined;
  createdAtNotIn?: Date[] | import("@compas/store").QueryPart<any> | undefined;
  createdAtGreaterThan?: Date | undefined;
  createdAtLowerThan?: Date | undefined;
  updatedAt?: Date | undefined;
  updatedAtNotEqual?: Date | undefined;
  updatedAtIn?: Date[] | import("@compas/store").QueryPart<any> | undefined;
  updatedAtNotIn?: Date[] | import("@compas/store").QueryPart<any> | undefined;
  updatedAtGreaterThan?: Date | undefined;
  updatedAtLowerThan?: Date | undefined;
};

export type StoreJobOrderBy =
  | (any | import("@compas/store").QueryPart<any>)
  | ("id" | "isComplete" | "name" | "scheduledAt" | "createdAt" | "updatedAt")[]
  | "id"
  | "isComplete"
  | "name"
  | "scheduledAt"
  | "createdAt"
  | "updatedAt";

export type StoreJobOrderByValidated =
  | import("@compas/store").QueryPart<any>
  | (
      | "id"
      | "isComplete"
      | "name"
      | "scheduledAt"
      | "createdAt"
      | "updatedAt"
    )[];

export type StoreJobOrderBySpec = {
  id?: "ASC" | "DESC" | undefined;
  isComplete?:
    | "ASC"
    | "DESC"
    | "ASC NULLS FIRST"
    | "DESC NULLS LAST"
    | undefined;
  name?: "ASC" | "DESC" | undefined;
  scheduledAt?:
    | "ASC"
    | "DESC"
    | "ASC NULLS FIRST"
    | "DESC NULLS LAST"
    | undefined;
  createdAt?: "ASC" | "DESC" | undefined;
  updatedAt?: "ASC" | "DESC" | undefined;
};

export type StoreJobReturning =
  | "*"
  | (
      | "id"
      | "isComplete"
      | "handlerTimeout"
      | "priority"
      | "retryCount"
      | "name"
      | "scheduledAt"
      | "data"
      | "createdAt"
      | "updatedAt"
    )[]
  | "id"
  | "isComplete"
  | "handlerTimeout"
  | "priority"
  | "retryCount"
  | "name"
  | "scheduledAt"
  | "data"
  | "createdAt"
  | "updatedAt"
  | undefined;

export type StoreJobQueryBuilder = {
  where?: StoreJobWhere | undefined;
  orderBy?: StoreJobOrderBy | undefined;
  orderBySpec?: StoreJobOrderBySpec | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  select?: StoreJobReturning | undefined;
};

export type StoreJobReturningValidated =
  | "*"
  | (
      | "id"
      | "isComplete"
      | "handlerTimeout"
      | "priority"
      | "retryCount"
      | "name"
      | "scheduledAt"
      | "data"
      | "createdAt"
      | "updatedAt"
    )[]
  | undefined;

export type StoreJobQueryBuilderValidated = {
  where?: StoreJobWhereValidated | undefined;
  orderBy?: StoreJobOrderByValidated | undefined;
  orderBySpec?: StoreJobOrderBySpec | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  select: StoreJobReturningValidated;
};

export type QueryResultStoreJob = {
  id: number;
  isComplete: boolean;
  handlerTimeout?: number | undefined;
  priority: number;
  retryCount: number;
  name: string;
  scheduledAt: Date;
  data: any;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt: Date;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt: Date;
};

export type QueryResultStoreJobInput = {
  id: number;
  isComplete?: boolean | "true" | "false" | undefined;
  handlerTimeout?: number | undefined;
  priority?: number | undefined;
  retryCount?: number | undefined;
  name: string;
  scheduledAt?: Date | string | number | undefined;
  data?: any | undefined;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt: Date | string | number;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt: Date | string | number;
};

export type StoreJobInsertPartial = {
  id?: number | undefined;
  isComplete?: boolean | "true" | "false" | undefined | null;
  handlerTimeout?: number | undefined | null;
  priority?: number | undefined | null;
  retryCount?: number | undefined | null;
  name: string;
  scheduledAt?: Date | string | number | undefined | null;
  data?: any | undefined | null;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt?: Date | string | number | undefined | null;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt?: Date | string | number | undefined | null;
};

export type StoreJobInsert = {
  insert: StoreJobInsertPartial[] | StoreJobInsertPartial;
  returning?: StoreJobReturning | undefined;
};

export type StoreJobInsertPartialValidated = {
  id?: number | undefined;
  isComplete: boolean;
  handlerTimeout?: number | undefined | null;
  priority: number;
  retryCount: number;
  name: string;
  scheduledAt: Date;
  data: any;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt?: Date | undefined | null;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt?: Date | undefined | null;
};

export type StoreJobInsertValidated = {
  insert: StoreJobInsertPartialValidated[];
  returning?: StoreJobReturningValidated | undefined;
};

export type StoreJobUpdatePartial = {
  isComplete?:
    | {
        $negate: boolean | "true" | "false";
      }
    | boolean
    | "true"
    | "false"
    | undefined
    | null;
  handlerTimeout?:
    | {
        $divide: number;
      }
    | {
        $multiply: number;
      }
    | {
        $subtract: number;
      }
    | {
        $add: number;
      }
    | number
    | undefined
    | null;
  priority?:
    | {
        $divide: number;
      }
    | {
        $multiply: number;
      }
    | {
        $subtract: number;
      }
    | {
        $add: number;
      }
    | number
    | undefined
    | null;
  retryCount?:
    | {
        $divide: number;
      }
    | {
        $multiply: number;
      }
    | {
        $subtract: number;
      }
    | {
        $add: number;
      }
    | number
    | undefined
    | null;
  name?:
    | {
        $append: string;
      }
    | string
    | undefined;
  scheduledAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | string
    | number
    | undefined
    | null;
  data?:
    | {
        $set: {
          path: (number | string)[] | number | string;
          value: any;
        };
      }
    | {
        $remove: {
          path: (number | string)[] | number | string;
        };
      }
    | any
    | undefined
    | null;
  createdAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | string
    | number
    | undefined;
  updatedAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | string
    | number
    | undefined;
};

export type StoreJobUpdate = {
  update: StoreJobUpdatePartial;
  where: StoreJobWhere;
  returning?: StoreJobReturning | undefined;
};

export type StoreJobUpdatePartialValidated = {
  isComplete?:
    | {
        $negate: boolean;
      }
    | boolean;
  handlerTimeout?:
    | {
        $divide: number;
      }
    | {
        $multiply: number;
      }
    | {
        $subtract: number;
      }
    | {
        $add: number;
      }
    | number
    | undefined
    | null;
  priority?:
    | {
        $divide: number;
      }
    | {
        $multiply: number;
      }
    | {
        $subtract: number;
      }
    | {
        $add: number;
      }
    | number;
  retryCount?:
    | {
        $divide: number;
      }
    | {
        $multiply: number;
      }
    | {
        $subtract: number;
      }
    | {
        $add: number;
      }
    | number;
  name?:
    | {
        $append: string;
      }
    | string
    | undefined;
  scheduledAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date;
  data?:
    | {
        $set: {
          path: (number | string)[];
          value: any;
        };
      }
    | {
        $remove: {
          path: (number | string)[];
        };
      }
    | any;
  createdAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | undefined;
  updatedAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | undefined;
};

export type StoreJobUpdateValidated = {
  update: StoreJobUpdatePartialValidated;
  where: StoreJobWhereValidated;
  returning?: StoreJobReturningValidated | undefined;
};

// Store all tokens that belong to a session.
export type StoreSessionStoreToken = {
  // The primary key of the 'sessionStoreToken' model.
  id: string;

  // The primary key of the 'sessionStore' model.
  session: string;
  expiresAt: Date;

  // The primary key of the 'sessionStoreToken' model.
  refreshToken?: string | undefined;
  revokedAt?: Date | undefined;
  createdAt: Date;
};

// Session data store, used by 'sessionStore\*' functions.
export type StoreSessionStore = {
  // The primary key of the 'sessionStore' model.
  id: string;
  checksum: string;
  revokedAt?: Date | undefined;
  data: any;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt: Date;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt: Date;
};

// Store all tokens that belong to a session.
export type StoreSessionStoreTokenInput = {
  // The primary key of the 'sessionStoreToken' model.
  id: string;

  // The primary key of the 'sessionStore' model.
  session: string;
  expiresAt: Date | string | number;

  // The primary key of the 'sessionStoreToken' model.
  refreshToken?: string | undefined;
  revokedAt?: Date | string | number | undefined;
  createdAt: Date | string | number;
};

// Session data store, used by 'sessionStore\*' functions.
export type StoreSessionStoreInput = {
  // The primary key of the 'sessionStore' model.
  id: string;
  checksum: string;
  revokedAt?: Date | string | number | undefined;
  data?: any | undefined;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt: Date | string | number;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt: Date | string | number;
};

export type StoreSessionStoreTokenWhere = {
  $raw?: (any | import("@compas/store").QueryPart<any>) | undefined;
  $or?: StoreSessionStoreTokenWhere[] | StoreSessionStoreTokenWhere | undefined;
  id?: string | undefined;
  idNotEqual?: string | undefined;
  idIn?:
    | string[]
    | string
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  idNotIn?:
    | string[]
    | string
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  session?: string | undefined;
  sessionNotEqual?: string | undefined;
  sessionIn?:
    | string[]
    | string
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  sessionNotIn?:
    | string[]
    | string
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  expiresAt?: Date | string | number | undefined;
  expiresAtNotEqual?: Date | string | number | undefined;
  expiresAtIn?:
    | (Date | string | number)[]
    | Date
    | string
    | number
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  expiresAtNotIn?:
    | (Date | string | number)[]
    | Date
    | string
    | number
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  expiresAtGreaterThan?: Date | string | number | undefined;
  expiresAtLowerThan?: Date | string | number | undefined;
  refreshToken?: string | undefined;
  refreshTokenNotEqual?: string | undefined;
  refreshTokenIn?:
    | string[]
    | string
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  refreshTokenNotIn?:
    | string[]
    | string
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  refreshTokenIsNull?: boolean | "true" | "false" | undefined;
  refreshTokenIsNotNull?: boolean | "true" | "false" | undefined;
  revokedAt?: Date | string | number | undefined;
  revokedAtNotEqual?: Date | string | number | undefined;
  revokedAtIn?:
    | (Date | string | number)[]
    | Date
    | string
    | number
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  revokedAtNotIn?:
    | (Date | string | number)[]
    | Date
    | string
    | number
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  revokedAtGreaterThan?: Date | string | number | undefined;
  revokedAtLowerThan?: Date | string | number | undefined;
  revokedAtIsNull?: boolean | "true" | "false" | undefined;
  revokedAtIsNotNull?: boolean | "true" | "false" | undefined;
  viaRefreshToken?:
    | {
        where?: StoreSessionStoreTokenWhere | undefined;
        limit?: number | undefined;
        offset?: number | undefined;
      }
    | undefined;
  viaSession?:
    | {
        where?: StoreSessionStoreWhere | undefined;
        limit?: number | undefined;
        offset?: number | undefined;
      }
    | undefined;
  viaAccessToken?:
    | {
        where?: StoreSessionStoreTokenWhere | undefined;
        limit?: number | undefined;
        offset?: number | undefined;
      }
    | undefined;
  accessTokenNotExists?: StoreSessionStoreTokenWhere | undefined;
};

export type StoreSessionStoreWhere = {
  $raw?: (any | import("@compas/store").QueryPart<any>) | undefined;
  $or?: StoreSessionStoreWhere[] | StoreSessionStoreWhere | undefined;
  id?: string | undefined;
  idNotEqual?: string | undefined;
  idIn?:
    | string[]
    | string
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  idNotIn?:
    | string[]
    | string
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  createdAt?: Date | string | number | undefined;
  createdAtNotEqual?: Date | string | number | undefined;
  createdAtIn?:
    | (Date | string | number)[]
    | Date
    | string
    | number
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  createdAtNotIn?:
    | (Date | string | number)[]
    | Date
    | string
    | number
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  createdAtGreaterThan?: Date | string | number | undefined;
  createdAtLowerThan?: Date | string | number | undefined;
  updatedAt?: Date | string | number | undefined;
  updatedAtNotEqual?: Date | string | number | undefined;
  updatedAtIn?:
    | (Date | string | number)[]
    | Date
    | string
    | number
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  updatedAtNotIn?:
    | (Date | string | number)[]
    | Date
    | string
    | number
    | (any | import("@compas/store").QueryPart<any>)
    | undefined;
  updatedAtGreaterThan?: Date | string | number | undefined;
  updatedAtLowerThan?: Date | string | number | undefined;
  viaAccessTokens?:
    | {
        where?: StoreSessionStoreTokenWhere | undefined;
        limit?: number | undefined;
        offset?: number | undefined;
      }
    | undefined;
  accessTokensNotExists?: StoreSessionStoreTokenWhere | undefined;
};

export type StoreSessionStoreTokenWhereValidated = {
  $raw?: import("@compas/store").QueryPart<any> | undefined;
  $or?: StoreSessionStoreTokenWhereValidated[] | undefined;
  id?: string | undefined;
  idNotEqual?: string | undefined;
  idIn?: string[] | import("@compas/store").QueryPart<any> | undefined;
  idNotIn?: string[] | import("@compas/store").QueryPart<any> | undefined;
  session?: string | undefined;
  sessionNotEqual?: string | undefined;
  sessionIn?: string[] | import("@compas/store").QueryPart<any> | undefined;
  sessionNotIn?: string[] | import("@compas/store").QueryPart<any> | undefined;
  expiresAt?: Date | undefined;
  expiresAtNotEqual?: Date | undefined;
  expiresAtIn?: Date[] | import("@compas/store").QueryPart<any> | undefined;
  expiresAtNotIn?: Date[] | import("@compas/store").QueryPart<any> | undefined;
  expiresAtGreaterThan?: Date | undefined;
  expiresAtLowerThan?: Date | undefined;
  refreshToken?: string | undefined;
  refreshTokenNotEqual?: string | undefined;
  refreshTokenIn?:
    | string[]
    | import("@compas/store").QueryPart<any>
    | undefined;
  refreshTokenNotIn?:
    | string[]
    | import("@compas/store").QueryPart<any>
    | undefined;
  refreshTokenIsNull?: boolean | undefined;
  refreshTokenIsNotNull?: boolean | undefined;
  revokedAt?: Date | undefined;
  revokedAtNotEqual?: Date | undefined;
  revokedAtIn?: Date[] | import("@compas/store").QueryPart<any> | undefined;
  revokedAtNotIn?: Date[] | import("@compas/store").QueryPart<any> | undefined;
  revokedAtGreaterThan?: Date | undefined;
  revokedAtLowerThan?: Date | undefined;
  revokedAtIsNull?: boolean | undefined;
  revokedAtIsNotNull?: boolean | undefined;
  viaRefreshToken?:
    | {
        where: StoreSessionStoreTokenWhereValidated;
        limit?: number | undefined;
        offset?: number | undefined;
      }
    | undefined;
  viaSession?:
    | {
        where: StoreSessionStoreWhereValidated;
        limit?: number | undefined;
        offset?: number | undefined;
      }
    | undefined;
  viaAccessToken?:
    | {
        where: StoreSessionStoreTokenWhereValidated;
        limit?: number | undefined;
        offset?: number | undefined;
      }
    | undefined;
  accessTokenNotExists?: StoreSessionStoreTokenWhereValidated | undefined;
};

export type StoreSessionStoreWhereValidated = {
  $raw?: import("@compas/store").QueryPart<any> | undefined;
  $or?: StoreSessionStoreWhereValidated[] | undefined;
  id?: string | undefined;
  idNotEqual?: string | undefined;
  idIn?: string[] | import("@compas/store").QueryPart<any> | undefined;
  idNotIn?: string[] | import("@compas/store").QueryPart<any> | undefined;
  createdAt?: Date | undefined;
  createdAtNotEqual?: Date | undefined;
  createdAtIn?: Date[] | import("@compas/store").QueryPart<any> | undefined;
  createdAtNotIn?: Date[] | import("@compas/store").QueryPart<any> | undefined;
  createdAtGreaterThan?: Date | undefined;
  createdAtLowerThan?: Date | undefined;
  updatedAt?: Date | undefined;
  updatedAtNotEqual?: Date | undefined;
  updatedAtIn?: Date[] | import("@compas/store").QueryPart<any> | undefined;
  updatedAtNotIn?: Date[] | import("@compas/store").QueryPart<any> | undefined;
  updatedAtGreaterThan?: Date | undefined;
  updatedAtLowerThan?: Date | undefined;
  viaAccessTokens?:
    | {
        where: StoreSessionStoreTokenWhereValidated;
        limit?: number | undefined;
        offset?: number | undefined;
      }
    | undefined;
  accessTokensNotExists?: StoreSessionStoreTokenWhereValidated | undefined;
};

export type StoreSessionStoreOrderBy =
  | (any | import("@compas/store").QueryPart<any>)
  | ("id" | "createdAt" | "updatedAt")[]
  | "id"
  | "createdAt"
  | "updatedAt";

export type StoreSessionStoreOrderByValidated =
  | import("@compas/store").QueryPart<any>
  | ("id" | "createdAt" | "updatedAt")[];

export type StoreSessionStoreOrderBySpec = {
  id?: "ASC" | "DESC" | undefined;
  createdAt?: "ASC" | "DESC" | undefined;
  updatedAt?: "ASC" | "DESC" | undefined;
};

export type StoreSessionStoreReturning =
  | "*"
  | ("id" | "checksum" | "revokedAt" | "data" | "createdAt" | "updatedAt")[]
  | "id"
  | "checksum"
  | "revokedAt"
  | "data"
  | "createdAt"
  | "updatedAt"
  | undefined;

export type StoreSessionStoreTokenOrderBy =
  | (any | import("@compas/store").QueryPart<any>)
  | ("id" | "session" | "expiresAt" | "refreshToken" | "revokedAt")[]
  | "id"
  | "session"
  | "expiresAt"
  | "refreshToken"
  | "revokedAt";

export type StoreSessionStoreTokenOrderBySpec = {
  id?: "ASC" | "DESC" | undefined;
  session?: "ASC" | "DESC" | undefined;
  expiresAt?: "ASC" | "DESC" | undefined;
  refreshToken?:
    | "ASC"
    | "DESC"
    | "ASC NULLS FIRST"
    | "DESC NULLS LAST"
    | undefined;
  revokedAt?:
    | "ASC"
    | "DESC"
    | "ASC NULLS FIRST"
    | "DESC NULLS LAST"
    | undefined;
};

export type StoreSessionStoreTokenReturning =
  | "*"
  | (
      | "id"
      | "session"
      | "expiresAt"
      | "refreshToken"
      | "revokedAt"
      | "createdAt"
    )[]
  | "id"
  | "session"
  | "expiresAt"
  | "refreshToken"
  | "revokedAt"
  | "createdAt"
  | undefined;

export type StoreSessionStoreTokenQueryBuilder = {
  where?: StoreSessionStoreTokenWhere | undefined;
  orderBy?: StoreSessionStoreTokenOrderBy | undefined;
  orderBySpec?: StoreSessionStoreTokenOrderBySpec | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  select?: StoreSessionStoreTokenReturning | undefined;
  refreshToken?: StoreSessionStoreTokenQueryBuilder | undefined;
  session?: StoreSessionStoreQueryBuilder | undefined;
  accessToken?: StoreSessionStoreTokenQueryBuilder | undefined;
};

export type StoreSessionStoreQueryBuilder = {
  where?: StoreSessionStoreWhere | undefined;
  orderBy?: StoreSessionStoreOrderBy | undefined;
  orderBySpec?: StoreSessionStoreOrderBySpec | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  select?: StoreSessionStoreReturning | undefined;
  accessTokens?: StoreSessionStoreTokenQueryBuilder | undefined;
};

export type StoreSessionStoreReturningValidated =
  | "*"
  | ("id" | "checksum" | "revokedAt" | "data" | "createdAt" | "updatedAt")[]
  | undefined;

export type StoreSessionStoreTokenOrderByValidated =
  | import("@compas/store").QueryPart<any>
  | ("id" | "session" | "expiresAt" | "refreshToken" | "revokedAt")[];

export type StoreSessionStoreTokenReturningValidated =
  | "*"
  | (
      | "id"
      | "session"
      | "expiresAt"
      | "refreshToken"
      | "revokedAt"
      | "createdAt"
    )[]
  | undefined;

export type StoreSessionStoreTokenQueryBuilderValidated = {
  where?: StoreSessionStoreTokenWhereValidated | undefined;
  orderBy?: StoreSessionStoreTokenOrderByValidated | undefined;
  orderBySpec?: StoreSessionStoreTokenOrderBySpec | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  select: StoreSessionStoreTokenReturningValidated;
  refreshToken?: StoreSessionStoreTokenQueryBuilderValidated | undefined;
  session?: StoreSessionStoreQueryBuilderValidated | undefined;
  accessToken?: StoreSessionStoreTokenQueryBuilderValidated | undefined;
};

export type StoreSessionStoreQueryBuilderValidated = {
  where?: StoreSessionStoreWhereValidated | undefined;
  orderBy?: StoreSessionStoreOrderByValidated | undefined;
  orderBySpec?: StoreSessionStoreOrderBySpec | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  select: StoreSessionStoreReturningValidated;
  accessTokens?: StoreSessionStoreTokenQueryBuilderValidated | undefined;
};

export type QueryResultStoreSessionStoreToken = {
  // The primary key of the 'sessionStoreToken' model.
  id: string;
  session: string | QueryResultStoreSessionStore;
  expiresAt: Date;
  refreshToken?: string | undefined | QueryResultStoreSessionStoreToken;
  revokedAt?: Date | undefined;
  createdAt: Date;
  accessToken?: QueryResultStoreSessionStoreToken | undefined;
};

export type QueryResultStoreSessionStore = {
  // The primary key of the 'sessionStore' model.
  id: string;
  checksum: string;
  revokedAt?: Date | undefined;
  data: any;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt: Date;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt: Date;
  accessTokens?: QueryResultStoreSessionStoreToken[] | undefined;
};

export type QueryResultStoreSessionStoreTokenInput = {
  // The primary key of the 'sessionStoreToken' model.
  id: string;
  session: string | QueryResultStoreSessionStoreInput;
  expiresAt: Date | string | number;
  refreshToken?: string | undefined | QueryResultStoreSessionStoreTokenInput;
  revokedAt?: Date | string | number | undefined;
  createdAt: Date | string | number;
  accessToken?: QueryResultStoreSessionStoreTokenInput | undefined;
};

export type QueryResultStoreSessionStoreInput = {
  // The primary key of the 'sessionStore' model.
  id: string;
  checksum: string;
  revokedAt?: Date | string | number | undefined;
  data?: any | undefined;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt: Date | string | number;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt: Date | string | number;
  accessTokens?:
    | QueryResultStoreSessionStoreTokenInput[]
    | QueryResultStoreSessionStoreTokenInput
    | undefined;
};

export type StoreSessionStoreInsertPartial = {
  // The primary key of the 'sessionStore' model.
  id?: string | undefined;
  checksum: string;
  revokedAt?: Date | string | number | undefined | null;
  data?: any | undefined | null;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt?: Date | string | number | undefined | null;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt?: Date | string | number | undefined | null;
};

export type StoreSessionStoreInsert = {
  insert: StoreSessionStoreInsertPartial[] | StoreSessionStoreInsertPartial;
  returning?: StoreSessionStoreReturning | undefined;
};

export type StoreSessionStoreInsertPartialValidated = {
  // The primary key of the 'sessionStore' model.
  id?: string | undefined;
  checksum: string;
  revokedAt?: Date | undefined | null;
  data: any;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt?: Date | undefined | null;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt?: Date | undefined | null;
};

export type StoreSessionStoreInsertValidated = {
  insert: StoreSessionStoreInsertPartialValidated[];
  returning?: StoreSessionStoreReturningValidated | undefined;
};

export type StoreSessionStoreUpdatePartial = {
  checksum?:
    | {
        $append: string;
      }
    | string
    | undefined;
  revokedAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | string
    | number
    | undefined
    | null;
  data?:
    | {
        $set: {
          path: (number | string)[] | number | string;
          value: any;
        };
      }
    | {
        $remove: {
          path: (number | string)[] | number | string;
        };
      }
    | any
    | undefined
    | null;
  createdAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | string
    | number
    | undefined;
  updatedAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | string
    | number
    | undefined;
};

export type StoreSessionStoreUpdate = {
  update: StoreSessionStoreUpdatePartial;
  where: StoreSessionStoreWhere;
  returning?: StoreSessionStoreReturning | undefined;
};

export type StoreSessionStoreUpdatePartialValidated = {
  checksum?:
    | {
        $append: string;
      }
    | string
    | undefined;
  revokedAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | undefined
    | null;
  data?:
    | {
        $set: {
          path: (number | string)[];
          value: any;
        };
      }
    | {
        $remove: {
          path: (number | string)[];
        };
      }
    | any;
  createdAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | undefined;
  updatedAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | undefined;
};

export type StoreSessionStoreUpdateValidated = {
  update: StoreSessionStoreUpdatePartialValidated;
  where: StoreSessionStoreWhereValidated;
  returning?: StoreSessionStoreReturningValidated | undefined;
};

export type StoreSessionStoreTokenInsertPartial = {
  // The primary key of the 'sessionStoreToken' model.
  id?: string | undefined;

  // The primary key of the 'sessionStore' model.
  session: string;
  expiresAt: Date | string | number;

  // The primary key of the 'sessionStoreToken' model.
  refreshToken?: string | undefined | null;
  revokedAt?: Date | string | number | undefined | null;
  createdAt: Date | string | number;
};

export type StoreSessionStoreTokenInsert = {
  insert:
    | StoreSessionStoreTokenInsertPartial[]
    | StoreSessionStoreTokenInsertPartial;
  returning?: StoreSessionStoreTokenReturning | undefined;
};

export type StoreSessionStoreTokenInsertPartialValidated = {
  // The primary key of the 'sessionStoreToken' model.
  id?: string | undefined;

  // The primary key of the 'sessionStore' model.
  session: string;
  expiresAt: Date;

  // The primary key of the 'sessionStoreToken' model.
  refreshToken?: string | undefined | null;
  revokedAt?: Date | undefined | null;
  createdAt: Date;
};

export type StoreSessionStoreTokenInsertValidated = {
  insert: StoreSessionStoreTokenInsertPartialValidated[];
  returning?: StoreSessionStoreTokenReturningValidated | undefined;
};

export type StoreSessionStoreTokenUpdatePartial = {
  session?: string | undefined;
  expiresAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | string
    | number
    | undefined;
  refreshToken?: string | undefined | null;
  revokedAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | string
    | number
    | undefined
    | null;
  createdAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | string
    | number
    | undefined;
};

export type StoreSessionStoreTokenUpdate = {
  update: StoreSessionStoreTokenUpdatePartial;
  where: StoreSessionStoreTokenWhere;
  returning?: StoreSessionStoreTokenReturning | undefined;
};

export type StoreSessionStoreTokenUpdatePartialValidated = {
  session?: string | undefined;
  expiresAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | undefined;
  refreshToken?: string | undefined | null;
  revokedAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | undefined
    | null;
  createdAt?:
    | {
        $subtract: string;
      }
    | {
        $add: string;
      }
    | Date
    | undefined;
};

export type StoreSessionStoreTokenUpdateValidated = {
  update: StoreSessionStoreTokenUpdatePartialValidated;
  where: StoreSessionStoreTokenWhereValidated;
  returning?: StoreSessionStoreTokenReturningValidated | undefined;
};

export type PostUpdateParams = {
  postId: string;
};

export type PostUpdateBody = {
  text: string;
};

export type PostUpdateResponse = {
  success: true | "true";
};

export type PostUpdateResponseRouterValidated = {
  success: true;
};

export type PostUpdateCtx = import("koa").ExtendableContext & {
  event: import("@compas/stdlib").InsightEvent;
  log: import("@compas/stdlib").Logger;
  validatedParams: PostUpdateParams;
  validatedBody: PostUpdateBody;
} & { body: PostUpdateResponseRouterValidated };

export type PostUpdateFn = (ctx: PostUpdateCtx) => void | Promise<void>;

export type PostListQuery = {
  offset: number;
  limit: number;
};

export type PostListQueryValidatorInput = {
  offset?: number | undefined;
  limit?: number | undefined;
};

export type PostListBody = {
  where?:
    | {
        id?: string | undefined;
        idNotEqual?: string | undefined;
        idIn: string[];
        idNotIn: string[];
        title?: string | undefined;
        titleNotEqual?: string | undefined;
        titleIn: string[];
        titleNotIn: string[];
        titleLike?: string | undefined;
        titleILike?: string | undefined;
        titleNotLike?: string | undefined;
        createdAt?: Date | undefined;
        createdAtNotEqual?: Date | undefined;
        createdAtIn: Date[];
        createdAtNotIn: Date[];
        createdAtGreaterThan?: Date | undefined;
        createdAtLowerThan?: Date | undefined;
        updatedAt?: Date | undefined;
        updatedAtNotEqual?: Date | undefined;
        updatedAtIn: Date[];
        updatedAtNotIn: Date[];
        updatedAtGreaterThan?: Date | undefined;
        updatedAtLowerThan?: Date | undefined;
      }
    | undefined;
  orderBy?: ("id" | "title" | "createdAt" | "updatedAt")[] | undefined;
  orderBySpec?:
    | {
        id?: "ASC" | "DESC" | undefined;
        title?: "ASC" | "DESC" | undefined;
        createdAt?: "ASC" | "DESC" | undefined;
        updatedAt?: "ASC" | "DESC" | undefined;
      }
    | undefined;
};

export type PostListBodyValidatorInput = {
  where?:
    | {
        id?: string | undefined;
        idNotEqual?: string | undefined;
        idIn: string[] | string;
        idNotIn: string[] | string;
        title?: string | undefined;
        titleNotEqual?: string | undefined;
        titleIn: string[] | string;
        titleNotIn: string[] | string;
        titleLike?: string | undefined;
        titleILike?: string | undefined;
        titleNotLike?: string | undefined;
        createdAt?: Date | string | number | undefined;
        createdAtNotEqual?: Date | string | number | undefined;
        createdAtIn: (Date | string | number)[] | Date | string | number;
        createdAtNotIn: (Date | string | number)[] | Date | string | number;
        createdAtGreaterThan?: Date | string | number | undefined;
        createdAtLowerThan?: Date | string | number | undefined;
        updatedAt?: Date | string | number | undefined;
        updatedAtNotEqual?: Date | string | number | undefined;
        updatedAtIn: (Date | string | number)[] | Date | string | number;
        updatedAtNotIn: (Date | string | number)[] | Date | string | number;
        updatedAtGreaterThan?: Date | string | number | undefined;
        updatedAtLowerThan?: Date | string | number | undefined;
      }
    | undefined;
  orderBy?:
    | ("id" | "title" | "createdAt" | "updatedAt")[]
    | "id"
    | "title"
    | "createdAt"
    | "updatedAt"
    | undefined;
  orderBySpec?:
    | {
        id?: "ASC" | "DESC" | undefined;
        title?: "ASC" | "DESC" | undefined;
        createdAt?: "ASC" | "DESC" | undefined;
        updatedAt?: "ASC" | "DESC" | undefined;
      }
    | undefined;
};

export type PostItem = {
  // The primary key of the 'post' model.
  id: string;
  text: string;
  title: string;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt: Date | string | number;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt: Date | string | number;
};

export type PostListResponse = {
  list: PostItem[] | PostItem;
  total: number;
};

export type PostItemRouterValidated = {
  // The primary key of the 'post' model.
  id: string;
  text: string;
  title: string;

  // Automatically generated 'createdAt', containing an ISO timestamp.
  createdAt: Date;

  // Automatically generated 'updatedAt', containing an ISO timestamp.
  updatedAt: Date;
};

export type PostListResponseRouterValidated = {
  list: PostItemRouterValidated[];
  total: number;
};

export type PostListCtx = import("koa").ExtendableContext & {
  event: import("@compas/stdlib").InsightEvent;
  log: import("@compas/stdlib").Logger;
  validatedQuery: PostListQuery;
  validatedBody: PostListBody;
} & { body: PostListResponseRouterValidated };

export type PostListFn = (ctx: PostListCtx) => void | Promise<void>;

export type PostSingleParams = {
  // The primary key of the 'post' model.
  postId: string;
};

export type PostSingleResponse = {
  item: PostItem;
};

export type PostSingleResponseRouterValidated = {
  item: PostItemRouterValidated;
};

export type PostSingleCtx = import("koa").ExtendableContext & {
  event: import("@compas/stdlib").InsightEvent;
  log: import("@compas/stdlib").Logger;
  validatedParams: PostSingleParams;
} & { body: PostSingleResponseRouterValidated };

export type PostSingleFn = (ctx: PostSingleCtx) => void | Promise<void>;

export type PostItemWrite = {
  text: string;
  title: string;
};

export type PostCreateResponse = {
  item: PostItem;
};

export type PostCreateResponseRouterValidated = {
  item: PostItemRouterValidated;
};

export type PostCreateCtx = import("koa").ExtendableContext & {
  event: import("@compas/stdlib").InsightEvent;
  log: import("@compas/stdlib").Logger;
  validatedBody: PostItemWrite;
} & { body: PostCreateResponseRouterValidated };

export type PostCreateFn = (ctx: PostCreateCtx) => void | Promise<void>;

export type CompasStructureResponse = any;

export type CompasStructureCtx = import("koa").ExtendableContext & {
  event: import("@compas/stdlib").InsightEvent;
  log: import("@compas/stdlib").Logger;
} & { body: CompasStructureResponse };

export type CompasStructureFn = (
  ctx: CompasStructureCtx,
) => void | Promise<void>;
